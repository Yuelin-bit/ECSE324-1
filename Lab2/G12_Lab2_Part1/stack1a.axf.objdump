
C:/Users/Alex/Documents/McGill/ECSE_324/Labs/ECSE324/Lab2/G12_Lab2_Part1/stack1a.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:

_start:	
			// create our own stack pointer
			// stack pointer points to the top of the stack
			// the stack has no data yet, so the top is also the bottom
			LDR R12, =BOTTOMSTACK
   0:	e59fc040 	ldr	r12, [pc, #64]	; 48 <BOTTOMSTACK+0x4>

			LDR R10, =N			//R10 points to the number of elements in the list
   4:	e59fa040 	ldr	r10, [pc, #64]	; 4c <BOTTOMSTACK+0x8>
			LDR R10, [R10]		// R10 holds the number of elements in the list
   8:	e59aa000 	ldr	r10, [r10]
			LDR R11, =NUMBERS	//R1 points to the first number
   c:	e59fb03c 	ldr	r11, [pc, #60]	; 50 <BOTTOMSTACK+0xc>

00000010 <LOOP>:

LOOP: 		LDR R0, [R11]			//R0 holds the next number in the list
  10:	e59b0000 	ldr	r0, [r11]
			STR R0, [R12, #4]!		// push value from R0 to top of stack, increment stack pointer
  14:	e5ac0004 	str	r0, [r12, #4]!
			ADD R11, R11, #4		// point to next number
  18:	e28bb004 	add	r11, r11, #4
			SUBS R10, R10, #1		// decrement loop counter
  1c:	e25aa001 	subs	r10, r10, #1
			BEQ NEXT				// leave loop if finished
  20:	0a000000 	beq	28 <NEXT>
			B LOOP					// back to start of loop
  24:	eafffff9 	b	10 <LOOP>

00000028 <NEXT>:

NEXT: 		LDMDA	R12!, {R0-R2}	// pop top 3 values of stack to R0, R1, and R2; decrement stack pointer after each pop
  28:	e83c0007 	ldmda	r12!, {r0, r1, r2}

0000002c <END>:

END: 		B END					// infinite loop
  2c:	eafffffe 	b	2c <END>

00000030 <N>:
  30:	00000004 	.word	0x00000004

00000034 <NUMBERS>:
  34:	00000004 	.word	0x00000004
  38:	00000005 	.word	0x00000005
  3c:	00000003 	.word	0x00000003
  40:	00000006 	.word	0x00000006

00000044 <BOTTOMSTACK>:
  44:	00000000 	.word	0x00000000
  48:	00000044 	.word	0x00000044
  4c:	00000030 	.word	0x00000030
  50:	00000034 	.word	0x00000034
