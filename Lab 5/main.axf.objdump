
C:/Users/Alex/Documents/McGill/ECSE_324/Labs/ECSE324/Lab 5/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	18 21 00 00 24 21 00 00 30 21 00 00 3c 21 00 00     .!..$!..0!..<!..
      30:	48 21 00 00 c4 35 00 00 c0 1f 00 00 54 21 00 00     H!...5......T!..

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000d21 	bl	3560 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	000036cc 	.word	0x000036cc

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <ICDISER+0x18>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <ICDISER+0x1c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <ICDISER+0x20>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00032910 	.word	0x00032910

00000124 <__cs3_heap_start_ptr>:
     124:	00032938 	.word	0x00032938

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00032918 	.word	0x00032918
     170:	0003291b 	.word	0x0003291b
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <ICDICER+0x38>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <ICDICER+0x3c>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <ICDICER+0x20>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <ICDICER+0x40>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <ICDICER+0x18>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <ICDICER+0x18>
     1b8:	00032918 	.word	0x00032918
     1bc:	00032918 	.word	0x00032918
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00032918 	.word	0x00032918
     200:	00000000 	.word	0x00000000
     204:	00003650 	.word	0x00003650

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00003650 	.word	0x00003650
     250:	0003291c 	.word	0x0003291c
     254:	000036d0 	.word	0x000036d0
     258:	00000000 	.word	0x00000000

0000025c <pow>:
#include "./drivers/inc/HEX_displays.h"
#include "./drivers/inc/slider_switches.h"

int volume = 1;
	
float pow(float base, int octave){
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
     264:	e24dd008 	sub	sp, sp, #8
     268:	e50b0008 	str	r0, [r11, #-8]
     26c:	e50b100c 	str	r1, [r11, #-12]
	while (octave < 1){
     270:	ea000007 	b	294 <pow+0x38>
		base = (float)base / (float)base;
     274:	e51b0008 	ldr	r0, [r11, #-8]
     278:	e51b1008 	ldr	r1, [r11, #-8]
     27c:	eb000b38 	bl	2f64 <__aeabi_fdiv>
     280:	e1a03000 	mov	r3, r0
     284:	e50b3008 	str	r3, [r11, #-8]
		octave++;
     288:	e51b300c 	ldr	r3, [r11, #-12]
     28c:	e2833001 	add	r3, r3, #1
     290:	e50b300c 	str	r3, [r11, #-12]
#include "./drivers/inc/slider_switches.h"

int volume = 1;
	
float pow(float base, int octave){
	while (octave < 1){
     294:	e51b300c 	ldr	r3, [r11, #-12]
     298:	e3530000 	cmp	r3, #0
     29c:	dafffff4 	ble	274 <pow+0x18>
		base = (float)base / (float)base;
		octave++;
	}
	while (octave > 1){
     2a0:	ea000007 	b	2c4 <pow+0x68>
		base = base*base;
     2a4:	e51b0008 	ldr	r0, [r11, #-8]
     2a8:	e51b1008 	ldr	r1, [r11, #-8]
     2ac:	eb000ac6 	bl	2dcc <__aeabi_fmul>
     2b0:	e1a03000 	mov	r3, r0
     2b4:	e50b3008 	str	r3, [r11, #-8]
		octave--;
     2b8:	e51b300c 	ldr	r3, [r11, #-12]
     2bc:	e2433001 	sub	r3, r3, #1
     2c0:	e50b300c 	str	r3, [r11, #-12]
float pow(float base, int octave){
	while (octave < 1){
		base = (float)base / (float)base;
		octave++;
	}
	while (octave > 1){
     2c4:	e51b300c 	ldr	r3, [r11, #-12]
     2c8:	e3530001 	cmp	r3, #1
     2cc:	cafffff4 	bgt	2a4 <pow+0x48>
		base = base*base;
		octave--;
	}
	return base;
     2d0:	e51b3008 	ldr	r3, [r11, #-8]
}
     2d4:	e1a00003 	mov	r0, r3
     2d8:	e24bd004 	sub	sp, r11, #4
     2dc:	e8bd8800 	pop	{r11, pc}

000002e0 <signal>:

int signal(float f, int t, int octave) {
     2e0:	e92d4810 	push	{r4, r11, lr}
     2e4:	e28db008 	add	r11, sp, #8
     2e8:	e24dd02c 	sub	sp, sp, #44	; 0x2c
     2ec:	e50b0028 	str	r0, [r11, #-40]	; 0xffffffd8
     2f0:	e50b102c 	str	r1, [r11, #-44]	; 0xffffffd4
     2f4:	e50b2030 	str	r2, [r11, #-48]	; 0xffffffd0
	int temp = (int)((float)(f * t) * (float)pow(2.0, (octave - 3)));
     2f8:	e51b002c 	ldr	r0, [r11, #-44]	; 0xffffffd4
     2fc:	eb000a7b 	bl	2cf0 <__aeabi_i2f>
     300:	e1a03000 	mov	r3, r0
     304:	e1a00003 	mov	r0, r3
     308:	e51b1028 	ldr	r1, [r11, #-40]	; 0xffffffd8
     30c:	eb000aae 	bl	2dcc <__aeabi_fmul>
     310:	e1a03000 	mov	r3, r0
     314:	e1a04003 	mov	r4, r3
     318:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
     31c:	e2433003 	sub	r3, r3, #3
     320:	e3a00101 	mov	r0, #1073741824	; 0x40000000
     324:	e1a01003 	mov	r1, r3
     328:	ebffffcb 	bl	25c <pow>
     32c:	e1a03000 	mov	r3, r0
     330:	e1a00004 	mov	r0, r4
     334:	e1a01003 	mov	r1, r3
     338:	eb000aa3 	bl	2dcc <__aeabi_fmul>
     33c:	e1a03000 	mov	r3, r0
     340:	e1a00003 	mov	r0, r3
     344:	eb000ba3 	bl	31d8 <__aeabi_f2iz>
     348:	e1a03000 	mov	r3, r0
     34c:	e50b3010 	str	r3, [r11, #-16]
	int index = temp % 48000;				// TODO: make this a float
     350:	e51b3010 	ldr	r3, [r11, #-16]
     354:	e30129f1 	movw	r2, #6641	; 0x19f1
     358:	e3402576 	movt	r2, #1398	; 0x576
     35c:	e0c21392 	smull	r1, r2, r2, r3
     360:	e1a01542 	asr	r1, r2, #10
     364:	e1a02fc3 	asr	r2, r3, #31
     368:	e0622001 	rsb	r2, r2, r1
     36c:	e30b1b80 	movw	r1, #48000	; 0xbb80
     370:	e0020291 	mul	r2, r1, r2
     374:	e0623003 	rsb	r3, r2, r3
     378:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	int indexLeftOfDecimal = (int)index;
     37c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     380:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	float decimals = index - indexLeftOfDecimal;
     384:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     388:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     38c:	e0633002 	rsb	r3, r3, r2
     390:	e1a00003 	mov	r0, r3
     394:	eb000a55 	bl	2cf0 <__aeabi_i2f>
     398:	e1a03000 	mov	r3, r0
     39c:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	float interpolated = (1-decimals)*sine[indexLeftOfDecimal] + (decimals)*sine[indexLeftOfDecimal+1];
     3a0:	e3a005fe 	mov	r0, #1065353216	; 0x3f800000
     3a4:	e51b101c 	ldr	r1, [r11, #-28]	; 0xffffffe4
     3a8:	eb0009de 	bl	2b28 <__aeabi_fsub>
     3ac:	e1a03000 	mov	r3, r0
     3b0:	e1a04003 	mov	r4, r3
     3b4:	e30336dc 	movw	r3, #14044	; 0x36dc
     3b8:	e3403000 	movt	r3, #0
     3bc:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     3c0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     3c4:	e1a00003 	mov	r0, r3
     3c8:	eb000a48 	bl	2cf0 <__aeabi_i2f>
     3cc:	e1a03000 	mov	r3, r0
     3d0:	e1a00004 	mov	r0, r4
     3d4:	e1a01003 	mov	r1, r3
     3d8:	eb000a7b 	bl	2dcc <__aeabi_fmul>
     3dc:	e1a03000 	mov	r3, r0
     3e0:	e1a04003 	mov	r4, r3
     3e4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     3e8:	e2832001 	add	r2, r3, #1
     3ec:	e30336dc 	movw	r3, #14044	; 0x36dc
     3f0:	e3403000 	movt	r3, #0
     3f4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     3f8:	e1a00003 	mov	r0, r3
     3fc:	eb000a3b 	bl	2cf0 <__aeabi_i2f>
     400:	e1a03000 	mov	r3, r0
     404:	e1a00003 	mov	r0, r3
     408:	e51b101c 	ldr	r1, [r11, #-28]	; 0xffffffe4
     40c:	eb000a6e 	bl	2dcc <__aeabi_fmul>
     410:	e1a03000 	mov	r3, r0
     414:	e1a00004 	mov	r0, r4
     418:	e1a01003 	mov	r1, r3
     41c:	eb0009c2 	bl	2b2c <__addsf3>
     420:	e1a03000 	mov	r3, r0
     424:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0

	// multiply signal by current volume to get appropriate signal amplitude
	return volume * interpolated;
     428:	e30336d8 	movw	r3, #14040	; 0x36d8
     42c:	e3403000 	movt	r3, #0
     430:	e5933000 	ldr	r3, [r3]
     434:	e1a00003 	mov	r0, r3
     438:	eb000a2c 	bl	2cf0 <__aeabi_i2f>
     43c:	e1a03000 	mov	r3, r0
     440:	e1a00003 	mov	r0, r3
     444:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
     448:	eb000a5f 	bl	2dcc <__aeabi_fmul>
     44c:	e1a03000 	mov	r3, r0
     450:	e1a00003 	mov	r0, r3
     454:	eb000b5f 	bl	31d8 <__aeabi_f2iz>
     458:	e1a03000 	mov	r3, r0
}
     45c:	e1a00003 	mov	r0, r3
     460:	e24bd008 	sub	sp, r11, #8
     464:	e8bd8810 	pop	{r4, r11, pc}

00000468 <pianoBase>:

void pianoBase(){
     468:	e92d4800 	push	{r11, lr}
     46c:	e28db004 	add	r11, sp, #4
     470:	e24dd018 	sub	sp, sp, #24
	int x,y,j,h,k;
	for (x=0; x<=319; x++){
     474:	e3a03000 	mov	r3, #0
     478:	e50b3008 	str	r3, [r11, #-8]
     47c:	ea00001c 	b	4f4 <pianoBase+0x8c>
		for (y=120; y<=239; y++){ //draws white for keys
     480:	e3a03078 	mov	r3, #120	; 0x78
     484:	e50b300c 	str	r3, [r11, #-12]
     488:	ea000006 	b	4a8 <pianoBase+0x40>
			VGA_draw_point_ASM(x,y,16777215);
     48c:	e51b0008 	ldr	r0, [r11, #-8]
     490:	e51b100c 	ldr	r1, [r11, #-12]
     494:	e3e02000 	mvn	r2, #0
     498:	eb00063d 	bl	1d94 <VGA_draw_point_ASM>
}

void pianoBase(){
	int x,y,j,h,k;
	for (x=0; x<=319; x++){
		for (y=120; y<=239; y++){ //draws white for keys
     49c:	e51b300c 	ldr	r3, [r11, #-12]
     4a0:	e2833001 	add	r3, r3, #1
     4a4:	e50b300c 	str	r3, [r11, #-12]
     4a8:	e51b300c 	ldr	r3, [r11, #-12]
     4ac:	e35300ef 	cmp	r3, #239	; 0xef
     4b0:	dafffff5 	ble	48c <pianoBase+0x24>
			VGA_draw_point_ASM(x,y,16777215);
			}
		for (j=0; j<=119; j++){ //draws background on top
     4b4:	e3a03000 	mov	r3, #0
     4b8:	e50b3010 	str	r3, [r11, #-16]
     4bc:	ea000006 	b	4dc <pianoBase+0x74>
			VGA_draw_point_ASM(x,j,31);
     4c0:	e51b0008 	ldr	r0, [r11, #-8]
     4c4:	e51b1010 	ldr	r1, [r11, #-16]
     4c8:	e3a0201f 	mov	r2, #31
     4cc:	eb000630 	bl	1d94 <VGA_draw_point_ASM>
	int x,y,j,h,k;
	for (x=0; x<=319; x++){
		for (y=120; y<=239; y++){ //draws white for keys
			VGA_draw_point_ASM(x,y,16777215);
			}
		for (j=0; j<=119; j++){ //draws background on top
     4d0:	e51b3010 	ldr	r3, [r11, #-16]
     4d4:	e2833001 	add	r3, r3, #1
     4d8:	e50b3010 	str	r3, [r11, #-16]
     4dc:	e51b3010 	ldr	r3, [r11, #-16]
     4e0:	e3530077 	cmp	r3, #119	; 0x77
     4e4:	dafffff5 	ble	4c0 <pianoBase+0x58>
	return volume * interpolated;
}

void pianoBase(){
	int x,y,j,h,k;
	for (x=0; x<=319; x++){
     4e8:	e51b3008 	ldr	r3, [r11, #-8]
     4ec:	e2833001 	add	r3, r3, #1
     4f0:	e50b3008 	str	r3, [r11, #-8]
     4f4:	e51b2008 	ldr	r2, [r11, #-8]
     4f8:	e300313f 	movw	r3, #319	; 0x13f
     4fc:	e1520003 	cmp	r2, r3
     500:	daffffde 	ble	480 <pianoBase+0x18>
			}
		for (j=0; j<=119; j++){ //draws background on top
			VGA_draw_point_ASM(x,j,31);
			}
	}
	for (x=38; x<=319; x=x+40){
     504:	e3a03026 	mov	r3, #38	; 0x26
     508:	e50b3008 	str	r3, [r11, #-8]
     50c:	ea000027 	b	5b0 <pianoBase+0x148>
		for (h=120; h<=239; h++){
     510:	e3a03078 	mov	r3, #120	; 0x78
     514:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     518:	ea00001e 	b	598 <pianoBase+0x130>
			VGA_draw_point_ASM(x,h,0);
     51c:	e51b0008 	ldr	r0, [r11, #-8]
     520:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
     524:	e3a02000 	mov	r2, #0
     528:	eb000619 	bl	1d94 <VGA_draw_point_ASM>
			VGA_draw_point_ASM(x+1,h,0);
     52c:	e51b3008 	ldr	r3, [r11, #-8]
     530:	e2833001 	add	r3, r3, #1
     534:	e1a00003 	mov	r0, r3
     538:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
     53c:	e3a02000 	mov	r2, #0
     540:	eb000613 	bl	1d94 <VGA_draw_point_ASM>
			VGA_draw_point_ASM(x+2,h,0);
     544:	e51b3008 	ldr	r3, [r11, #-8]
     548:	e2833002 	add	r3, r3, #2
     54c:	e1a00003 	mov	r0, r3
     550:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
     554:	e3a02000 	mov	r2, #0
     558:	eb00060d 	bl	1d94 <VGA_draw_point_ASM>
			VGA_draw_point_ASM(x+3,h,0);
     55c:	e51b3008 	ldr	r3, [r11, #-8]
     560:	e2833003 	add	r3, r3, #3
     564:	e1a00003 	mov	r0, r3
     568:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
     56c:	e3a02000 	mov	r2, #0
     570:	eb000607 	bl	1d94 <VGA_draw_point_ASM>
			VGA_draw_point_ASM(x+4,h,0);
     574:	e51b3008 	ldr	r3, [r11, #-8]
     578:	e2833004 	add	r3, r3, #4
     57c:	e1a00003 	mov	r0, r3
     580:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
     584:	e3a02000 	mov	r2, #0
     588:	eb000601 	bl	1d94 <VGA_draw_point_ASM>
		for (j=0; j<=119; j++){ //draws background on top
			VGA_draw_point_ASM(x,j,31);
			}
	}
	for (x=38; x<=319; x=x+40){
		for (h=120; h<=239; h++){
     58c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     590:	e2833001 	add	r3, r3, #1
     594:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     598:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     59c:	e35300ef 	cmp	r3, #239	; 0xef
     5a0:	daffffdd 	ble	51c <pianoBase+0xb4>
			}
		for (j=0; j<=119; j++){ //draws background on top
			VGA_draw_point_ASM(x,j,31);
			}
	}
	for (x=38; x<=319; x=x+40){
     5a4:	e51b3008 	ldr	r3, [r11, #-8]
     5a8:	e2833028 	add	r3, r3, #40	; 0x28
     5ac:	e50b3008 	str	r3, [r11, #-8]
     5b0:	e51b2008 	ldr	r2, [r11, #-8]
     5b4:	e300313f 	movw	r3, #319	; 0x13f
     5b8:	e1520003 	cmp	r2, r3
     5bc:	daffffd3 	ble	510 <pianoBase+0xa8>
			VGA_draw_point_ASM(x+2,h,0);
			VGA_draw_point_ASM(x+3,h,0);
			VGA_draw_point_ASM(x+4,h,0);
		}	
	}
	for (x=0; x<=2; x++){
     5c0:	e3a03000 	mov	r3, #0
     5c4:	e50b3008 	str	r3, [r11, #-8]
     5c8:	ea00000f 	b	60c <pianoBase+0x1a4>
		for (k=120; k<=239; k++){
     5cc:	e3a03078 	mov	r3, #120	; 0x78
     5d0:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
     5d4:	ea000006 	b	5f4 <pianoBase+0x18c>
			VGA_draw_point_ASM(x,k,0);
     5d8:	e51b0008 	ldr	r0, [r11, #-8]
     5dc:	e51b1018 	ldr	r1, [r11, #-24]	; 0xffffffe8
     5e0:	e3a02000 	mov	r2, #0
     5e4:	eb0005ea 	bl	1d94 <VGA_draw_point_ASM>
			VGA_draw_point_ASM(x+3,h,0);
			VGA_draw_point_ASM(x+4,h,0);
		}	
	}
	for (x=0; x<=2; x++){
		for (k=120; k<=239; k++){
     5e8:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     5ec:	e2833001 	add	r3, r3, #1
     5f0:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
     5f4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     5f8:	e35300ef 	cmp	r3, #239	; 0xef
     5fc:	dafffff5 	ble	5d8 <pianoBase+0x170>
			VGA_draw_point_ASM(x+2,h,0);
			VGA_draw_point_ASM(x+3,h,0);
			VGA_draw_point_ASM(x+4,h,0);
		}	
	}
	for (x=0; x<=2; x++){
     600:	e51b3008 	ldr	r3, [r11, #-8]
     604:	e2833001 	add	r3, r3, #1
     608:	e50b3008 	str	r3, [r11, #-8]
     60c:	e51b3008 	ldr	r3, [r11, #-8]
     610:	e3530002 	cmp	r3, #2
     614:	daffffec 	ble	5cc <pianoBase+0x164>
		for (k=120; k<=239; k++){
			VGA_draw_point_ASM(x,k,0);
		}
	}
}
     618:	e24bd004 	sub	sp, r11, #4
     61c:	e8bd8800 	pop	{r11, pc}

00000620 <piano>:

void piano(float f, int octave){
     620:	e92d4800 	push	{r11, lr}
     624:	e28db004 	add	r11, sp, #4
     628:	e24dd018 	sub	sp, sp, #24
     62c:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     630:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	pianoBase();
     634:	ebffff8b 	bl	468 <pianoBase>
	int x, r;
	int j = ((int)f-100)/14 - 1;
     638:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
     63c:	eb000ae5 	bl	31d8 <__aeabi_f2iz>
     640:	e1a03000 	mov	r3, r0
     644:	e2433064 	sub	r3, r3, #100	; 0x64
     648:	e3022493 	movw	r2, #9363	; 0x2493
     64c:	e3492249 	movt	r2, #37449	; 0x9249
     650:	e0c21392 	smull	r1, r2, r2, r3
     654:	e0822003 	add	r2, r2, r3
     658:	e1a021c2 	asr	r2, r2, #3
     65c:	e1a03fc3 	asr	r3, r3, #31
     660:	e0633002 	rsb	r3, r3, r2
     664:	e2433001 	sub	r3, r3, #1
     668:	e50b3010 	str	r3, [r11, #-16]
	
	// update the volume and octave
    VGA_write_char_ASM(7, 0, volume + 48);
     66c:	e30336d8 	movw	r3, #14040	; 0x36d8
     670:	e3403000 	movt	r3, #0
     674:	e5933000 	ldr	r3, [r3]
     678:	e6ef3073 	uxtb	r3, r3
     67c:	e2833030 	add	r3, r3, #48	; 0x30
     680:	e6ef3073 	uxtb	r3, r3
     684:	e3a00007 	mov	r0, #7
     688:	e3a01000 	mov	r1, #0
     68c:	e1a02003 	mov	r2, r3
     690:	eb00059b 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(7, 2, octave + 48);	
     694:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     698:	e6ef3073 	uxtb	r3, r3
     69c:	e2833030 	add	r3, r3, #48	; 0x30
     6a0:	e6ef3073 	uxtb	r3, r3
     6a4:	e3a00007 	mov	r0, #7
     6a8:	e3a01002 	mov	r1, #2
     6ac:	e1a02003 	mov	r2, r3
     6b0:	eb000593 	bl	1d04 <VGA_write_char_ASM>

	if (j > 6){
     6b4:	e51b3010 	ldr	r3, [r11, #-16]
     6b8:	e3530006 	cmp	r3, #6
     6bc:	da000008 	ble	6e4 <piano+0xc4>
		j = j - 1;
     6c0:	e51b3010 	ldr	r3, [r11, #-16]
     6c4:	e2433001 	sub	r3, r3, #1
     6c8:	e50b3010 	str	r3, [r11, #-16]
		if (j > 7){
     6cc:	e51b3010 	ldr	r3, [r11, #-16]
     6d0:	e3530007 	cmp	r3, #7
     6d4:	da000002 	ble	6e4 <piano+0xc4>
			j = j - 1;
     6d8:	e51b3010 	ldr	r3, [r11, #-16]
     6dc:	e2433001 	sub	r3, r3, #1
     6e0:	e50b3010 	str	r3, [r11, #-16]
		}
	}
	for (x = 3; x <= 37; x++){
     6e4:	e3a03003 	mov	r3, #3
     6e8:	e50b3008 	str	r3, [r11, #-8]
     6ec:	ea000018 	b	754 <piano+0x134>
		for (r = 120; r <= 239; r++){
     6f0:	e3a03078 	mov	r3, #120	; 0x78
     6f4:	e50b300c 	str	r3, [r11, #-12]
     6f8:	ea00000f 	b	73c <piano+0x11c>
			VGA_draw_point_ASM((j - 1) * 40 + x, r, 16000);
     6fc:	e51b3010 	ldr	r3, [r11, #-16]
     700:	e2432001 	sub	r2, r3, #1
     704:	e1a03002 	mov	r3, r2
     708:	e1a03103 	lsl	r3, r3, #2
     70c:	e0833002 	add	r3, r3, r2
     710:	e1a03183 	lsl	r3, r3, #3
     714:	e1a02003 	mov	r2, r3
     718:	e51b3008 	ldr	r3, [r11, #-8]
     71c:	e0823003 	add	r3, r2, r3
     720:	e1a00003 	mov	r0, r3
     724:	e51b100c 	ldr	r1, [r11, #-12]
     728:	e3a02dfa 	mov	r2, #16000	; 0x3e80
     72c:	eb000598 	bl	1d94 <VGA_draw_point_ASM>
		if (j > 7){
			j = j - 1;
		}
	}
	for (x = 3; x <= 37; x++){
		for (r = 120; r <= 239; r++){
     730:	e51b300c 	ldr	r3, [r11, #-12]
     734:	e2833001 	add	r3, r3, #1
     738:	e50b300c 	str	r3, [r11, #-12]
     73c:	e51b300c 	ldr	r3, [r11, #-12]
     740:	e35300ef 	cmp	r3, #239	; 0xef
     744:	daffffec 	ble	6fc <piano+0xdc>
		j = j - 1;
		if (j > 7){
			j = j - 1;
		}
	}
	for (x = 3; x <= 37; x++){
     748:	e51b3008 	ldr	r3, [r11, #-8]
     74c:	e2833001 	add	r3, r3, #1
     750:	e50b3008 	str	r3, [r11, #-8]
     754:	e51b3008 	ldr	r3, [r11, #-8]
     758:	e3530025 	cmp	r3, #37	; 0x25
     75c:	daffffe3 	ble	6f0 <piano+0xd0>
		for (r = 120; r <= 239; r++){
			VGA_draw_point_ASM((j - 1) * 40 + x, r, 16000);
		}
	}
}
     760:	e24bd004 	sub	sp, r11, #4
     764:	e8bd8800 	pop	{r11, pc}

00000768 <wave>:

void wave(float f, int volume, int octave) {
     768:	e92d4810 	push	{r4, r11, lr}
     76c:	e28db008 	add	r11, sp, #8
     770:	e24dd02c 	sub	sp, sp, #44	; 0x2c
     774:	e50b0028 	str	r0, [r11, #-40]	; 0xffffffd8
     778:	e50b102c 	str	r1, [r11, #-44]	; 0xffffffd4
     77c:	e50b2030 	str	r2, [r11, #-48]	; 0xffffffd0
	// clear the screen of old data
	VGA_clear_pixelbuff_ASM();
     780:	eb00054f 	bl	1cc4 <VGA_clear_pixelbuff_ASM>

	if (f) {											// only display anything if the frequency is above 0
     784:	e51b0028 	ldr	r0, [r11, #-40]	; 0xffffffd8
     788:	e3a01000 	mov	r1, #0
     78c:	eb000a73 	bl	3160 <__aeabi_fcmpeq>
     790:	e1a03000 	mov	r3, r0
     794:	e3530000 	cmp	r3, #0
     798:	1a00008a 	bne	9c8 <ICDIPTR+0x1c8>
		int x, y;
		short colour = 16777215; // white
     79c:	e3e03000 	mvn	r3, #0
     7a0:	e14b31b6 	strh	r3, [r11, #-22]	; 0xffffffea

		// update the volume and octave
	    VGA_write_char_ASM(7, 0, volume + 48);
     7a4:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
     7a8:	e6ef3073 	uxtb	r3, r3
     7ac:	e2833030 	add	r3, r3, #48	; 0x30
     7b0:	e6ef3073 	uxtb	r3, r3
     7b4:	e3a00007 	mov	r0, #7
     7b8:	e3a01000 	mov	r1, #0
     7bc:	e1a02003 	mov	r2, r3
     7c0:	eb00054f 	bl	1d04 <VGA_write_char_ASM>
		VGA_write_char_ASM(7, 2, octave + 48);	
     7c4:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
     7c8:	e6ef3073 	uxtb	r3, r3
     7cc:	e2833030 	add	r3, r3, #48	; 0x30
     7d0:	e6ef3073 	uxtb	r3, r3
     7d4:	e3a00007 	mov	r0, #7
     7d8:	e3a01002 	mov	r1, #2
     7dc:	e1a02003 	mov	r2, r3
     7e0:	eb000547 	bl	1d04 <VGA_write_char_ASM>

		// iterate through all of the pixels on the screen
		int increment = (int)((float)(48000 / ((320.00 / f) * 50.00)) * (float)(pow(2.0, (octave - 3))));
     7e4:	e51b0028 	ldr	r0, [r11, #-40]	; 0xffffffd8
     7e8:	eb000750 	bl	2530 <__aeabi_f2d>
     7ec:	e1a02000 	mov	r2, r0
     7f0:	e1a03001 	mov	r3, r1
     7f4:	e3a00000 	mov	r0, #0
     7f8:	e3a01000 	mov	r1, #0
     7fc:	e3441074 	movt	r1, #16500	; 0x4074
     800:	eb00081b 	bl	2874 <__aeabi_ddiv>
     804:	e1a02000 	mov	r2, r0
     808:	e1a03001 	mov	r3, r1
     80c:	e1a00002 	mov	r0, r2
     810:	e1a01003 	mov	r1, r3
     814:	e3a02000 	mov	r2, #0
     818:	e3a03000 	mov	r3, #0
     81c:	e3443049 	movt	r3, #16457	; 0x4049
     820:	eb00076f 	bl	25e4 <__aeabi_dmul>
     824:	e1a02000 	mov	r2, r0
     828:	e1a03001 	mov	r3, r1
     82c:	e3a00000 	mov	r0, #0
     830:	e3a01a07 	mov	r1, #28672	; 0x7000
     834:	e34410e7 	movt	r1, #16615	; 0x40e7
     838:	eb00080d 	bl	2874 <__aeabi_ddiv>
     83c:	e1a02000 	mov	r2, r0
     840:	e1a03001 	mov	r3, r1
     844:	e1a00002 	mov	r0, r2
     848:	e1a01003 	mov	r1, r3
     84c:	eb00088b 	bl	2a80 <__aeabi_d2f>
     850:	e1a04000 	mov	r4, r0
     854:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
     858:	e2433003 	sub	r3, r3, #3
     85c:	e3a00101 	mov	r0, #1073741824	; 0x40000000
     860:	e1a01003 	mov	r1, r3
     864:	ebfffe7c 	bl	25c <pow>
     868:	e1a03000 	mov	r3, r0
     86c:	e1a00004 	mov	r0, r4
     870:	e1a01003 	mov	r1, r3
     874:	eb000954 	bl	2dcc <__aeabi_fmul>
     878:	e1a03000 	mov	r3, r0
     87c:	e1a00003 	mov	r0, r3
     880:	eb000a54 	bl	31d8 <__aeabi_f2iz>
     884:	e1a03000 	mov	r3, r0
     888:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
			// 320 = number of spaces in the x direction in the pixel buffer
			// 50 Hz = base frequency
			// f = current signal frequency
			// adjustment made for current octave

		int xposition = 0; //initial x position is set in the sine wave
     88c:	e3a03000 	mov	r3, #0
     890:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
		
		// iterate through the x direction of the pixel buffer
		for(x = 0; x <= 319; x++) {
     894:	e3a03000 	mov	r3, #0
     898:	e50b3010 	str	r3, [r11, #-16]
     89c:	ea000045 	b	9b8 <ICDIPTR+0x1b8>
			// generate the y position of the wave at the current x position
				// uses the provided wavetable, sine[x]
				// amplitude of wave on screen increases by 15 for each volume increment
			y = -1*(int)((float)sine[xposition] * ((float)30 / (float)(sine[12000]))) * ((float)volume / (float)2) + 120;		
     8a0:	e30336dc 	movw	r3, #14044	; 0x36dc
     8a4:	e3403000 	movt	r3, #0
     8a8:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     8ac:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     8b0:	e1a00003 	mov	r0, r3
     8b4:	eb00090d 	bl	2cf0 <__aeabi_i2f>
     8b8:	e1a04000 	mov	r4, r0
     8bc:	e30336dc 	movw	r3, #14044	; 0x36dc
     8c0:	e3403000 	movt	r3, #0
     8c4:	e30b2b80 	movw	r2, #48000	; 0xbb80
     8c8:	e7933002 	ldr	r3, [r3, r2]
     8cc:	e1a00003 	mov	r0, r3
     8d0:	eb000906 	bl	2cf0 <__aeabi_i2f>
     8d4:	e1a03000 	mov	r3, r0
     8d8:	e3a00000 	mov	r0, #0
     8dc:	e34401f0 	movt	r0, #16880	; 0x41f0
     8e0:	e1a01003 	mov	r1, r3
     8e4:	eb00099e 	bl	2f64 <__aeabi_fdiv>
     8e8:	e1a03000 	mov	r3, r0
     8ec:	e1a00004 	mov	r0, r4
     8f0:	e1a01003 	mov	r1, r3
     8f4:	eb000934 	bl	2dcc <__aeabi_fmul>
     8f8:	e1a03000 	mov	r3, r0
     8fc:	e1a00003 	mov	r0, r3
     900:	eb000a34 	bl	31d8 <__aeabi_f2iz>
     904:	e1a03000 	mov	r3, r0
     908:	e2633000 	rsb	r3, r3, #0
     90c:	e1a00003 	mov	r0, r3
     910:	eb0008f6 	bl	2cf0 <__aeabi_i2f>
     914:	e1a04000 	mov	r4, r0
     918:	e51b002c 	ldr	r0, [r11, #-44]	; 0xffffffd4
     91c:	eb0008f3 	bl	2cf0 <__aeabi_i2f>
     920:	e1a03000 	mov	r3, r0
     924:	e1a00003 	mov	r0, r3
     928:	e3a01101 	mov	r1, #1073741824	; 0x40000000
     92c:	eb00098c 	bl	2f64 <__aeabi_fdiv>
     930:	e1a03000 	mov	r3, r0
     934:	e1a00004 	mov	r0, r4
     938:	e1a01003 	mov	r1, r3
     93c:	eb000922 	bl	2dcc <__aeabi_fmul>
     940:	e1a03000 	mov	r3, r0
     944:	e1a00003 	mov	r0, r3
     948:	e3a01000 	mov	r1, #0
     94c:	e34412f0 	movt	r1, #17136	; 0x42f0
     950:	eb000875 	bl	2b2c <__addsf3>
     954:	e1a03000 	mov	r3, r0
     958:	e1a00003 	mov	r0, r3
     95c:	eb000a1d 	bl	31d8 <__aeabi_f2iz>
     960:	e1a03000 	mov	r3, r0
     964:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
			
			// draw the point on the screen
			VGA_draw_point_ASM(x, y, colour);
     968:	e15b31f6 	ldrsh	r3, [r11, #-22]	; 0xffffffea
     96c:	e51b0010 	ldr	r0, [r11, #-16]
     970:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
     974:	e1a02003 	mov	r2, r3
     978:	eb000505 	bl	1d94 <VGA_draw_point_ASM>
			
			// increase the x position by the appropriate increment for this frequency
			xposition = xposition + increment;
     97c:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     980:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     984:	e0823003 	add	r3, r2, r3
     988:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
			
			// reset when the number of samples is exceeded
			if (xposition > 48000){
     98c:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     990:	e30b3b80 	movw	r3, #48000	; 0xbb80
     994:	e1520003 	cmp	r2, r3
     998:	da000003 	ble	9ac <ICDIPTR+0x1ac>
				xposition = xposition - 48000; //Resets iteration of the sine wave
     99c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     9a0:	e2433cbb 	sub	r3, r3, #47872	; 0xbb00
     9a4:	e2433080 	sub	r3, r3, #128	; 0x80
     9a8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
			// adjustment made for current octave

		int xposition = 0; //initial x position is set in the sine wave
		
		// iterate through the x direction of the pixel buffer
		for(x = 0; x <= 319; x++) {
     9ac:	e51b3010 	ldr	r3, [r11, #-16]
     9b0:	e2833001 	add	r3, r3, #1
     9b4:	e50b3010 	str	r3, [r11, #-16]
     9b8:	e51b2010 	ldr	r2, [r11, #-16]
     9bc:	e300313f 	movw	r3, #319	; 0x13f
     9c0:	e1520003 	cmp	r2, r3
     9c4:	daffffb5 	ble	8a0 <ICDIPTR+0xa0>
			
			// change the wave colour as we go for extra #funtimes
			//colour=colour+128;
		}
	}
}
     9c8:	e24bd008 	sub	sp, r11, #8
     9cc:	e8bd8810 	pop	{r4, r11, pc}

000009d0 <displayInstructions>:

void displayInstructions() {
     9d0:	e92d4800 	push	{r11, lr}
     9d4:	e28db004 	add	r11, sp, #4
	VGA_clear_charbuff_ASM();
     9d8:	eb0004a9 	bl	1c84 <VGA_clear_charbuff_ASM>
	VGA_clear_pixelbuff_ASM();
     9dc:	eb0004b8 	bl	1cc4 <VGA_clear_pixelbuff_ASM>

	// Display initial volume
	VGA_write_char_ASM(0,0, 'V');
     9e0:	e3a00000 	mov	r0, #0
     9e4:	e3a01000 	mov	r1, #0
     9e8:	e3a02056 	mov	r2, #86	; 0x56
     9ec:	eb0004c4 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(1,0, 'O');
     9f0:	e3a00001 	mov	r0, #1
     9f4:	e3a01000 	mov	r1, #0
     9f8:	e3a0204f 	mov	r2, #79	; 0x4f
     9fc:	eb0004c0 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(2,0, 'L');
     a00:	e3a00002 	mov	r0, #2
     a04:	e3a01000 	mov	r1, #0
     a08:	e3a0204c 	mov	r2, #76	; 0x4c
     a0c:	eb0004bc 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(3,0, 'U');
     a10:	e3a00003 	mov	r0, #3
     a14:	e3a01000 	mov	r1, #0
     a18:	e3a02055 	mov	r2, #85	; 0x55
     a1c:	eb0004b8 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(4,0, 'M');
     a20:	e3a00004 	mov	r0, #4
     a24:	e3a01000 	mov	r1, #0
     a28:	e3a0204d 	mov	r2, #77	; 0x4d
     a2c:	eb0004b4 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(5,0, 'E');
     a30:	e3a00005 	mov	r0, #5
     a34:	e3a01000 	mov	r1, #0
     a38:	e3a02045 	mov	r2, #69	; 0x45
     a3c:	eb0004b0 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(6,0, ':');
     a40:	e3a00006 	mov	r0, #6
     a44:	e3a01000 	mov	r1, #0
     a48:	e3a0203a 	mov	r2, #58	; 0x3a
     a4c:	eb0004ac 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(7,0, '1');
     a50:	e3a00007 	mov	r0, #7
     a54:	e3a01000 	mov	r1, #0
     a58:	e3a02031 	mov	r2, #49	; 0x31
     a5c:	eb0004a8 	bl	1d04 <VGA_write_char_ASM>

	// Display intial octave
	VGA_write_char_ASM(0,2, 'O');
     a60:	e3a00000 	mov	r0, #0
     a64:	e3a01002 	mov	r1, #2
     a68:	e3a0204f 	mov	r2, #79	; 0x4f
     a6c:	eb0004a4 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(1,2, 'C');
     a70:	e3a00001 	mov	r0, #1
     a74:	e3a01002 	mov	r1, #2
     a78:	e3a02043 	mov	r2, #67	; 0x43
     a7c:	eb0004a0 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(2,2, 'T');
     a80:	e3a00002 	mov	r0, #2
     a84:	e3a01002 	mov	r1, #2
     a88:	e3a02054 	mov	r2, #84	; 0x54
     a8c:	eb00049c 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(3,2, 'A');
     a90:	e3a00003 	mov	r0, #3
     a94:	e3a01002 	mov	r1, #2
     a98:	e3a02041 	mov	r2, #65	; 0x41
     a9c:	eb000498 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(4,2, 'V');
     aa0:	e3a00004 	mov	r0, #4
     aa4:	e3a01002 	mov	r1, #2
     aa8:	e3a02056 	mov	r2, #86	; 0x56
     aac:	eb000494 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(5,2, 'E');
     ab0:	e3a00005 	mov	r0, #5
     ab4:	e3a01002 	mov	r1, #2
     ab8:	e3a02045 	mov	r2, #69	; 0x45
     abc:	eb000490 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(6,2, ':');
     ac0:	e3a00006 	mov	r0, #6
     ac4:	e3a01002 	mov	r1, #2
     ac8:	e3a0203a 	mov	r2, #58	; 0x3a
     acc:	eb00048c 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(7,2, '3');
     ad0:	e3a00007 	mov	r0, #7
     ad4:	e3a01002 	mov	r1, #2
     ad8:	e3a02033 	mov	r2, #51	; 0x33
     adc:	eb000488 	bl	1d04 <VGA_write_char_ASM>

	// display instructions
	VGA_write_char_ASM(61,0, 'C');
     ae0:	e3a0003d 	mov	r0, #61	; 0x3d
     ae4:	e3a01000 	mov	r1, #0
     ae8:	e3a02043 	mov	r2, #67	; 0x43
     aec:	eb000484 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(62,0, ' ');
     af0:	e3a0003e 	mov	r0, #62	; 0x3e
     af4:	e3a01000 	mov	r1, #0
     af8:	e3a02020 	mov	r2, #32
     afc:	eb000480 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(63,0, '=');
     b00:	e3a0003f 	mov	r0, #63	; 0x3f
     b04:	e3a01000 	mov	r1, #0
     b08:	e3a0203d 	mov	r2, #61	; 0x3d
     b0c:	eb00047c 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(64,0, ' ');
     b10:	e3a00040 	mov	r0, #64	; 0x40
     b14:	e3a01000 	mov	r1, #0
     b18:	e3a02020 	mov	r2, #32
     b1c:	eb000478 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(65,0, 'D');
     b20:	e3a00041 	mov	r0, #65	; 0x41
     b24:	e3a01000 	mov	r1, #0
     b28:	e3a02044 	mov	r2, #68	; 0x44
     b2c:	eb000474 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(66,0, 'E');
     b30:	e3a00042 	mov	r0, #66	; 0x42
     b34:	e3a01000 	mov	r1, #0
     b38:	e3a02045 	mov	r2, #69	; 0x45
     b3c:	eb000470 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(67,0, 'C');
     b40:	e3a00043 	mov	r0, #67	; 0x43
     b44:	e3a01000 	mov	r1, #0
     b48:	e3a02043 	mov	r2, #67	; 0x43
     b4c:	eb00046c 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(68,0, 'R');
     b50:	e3a00044 	mov	r0, #68	; 0x44
     b54:	e3a01000 	mov	r1, #0
     b58:	e3a02052 	mov	r2, #82	; 0x52
     b5c:	eb000468 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(69,0, 'E');
     b60:	e3a00045 	mov	r0, #69	; 0x45
     b64:	e3a01000 	mov	r1, #0
     b68:	e3a02045 	mov	r2, #69	; 0x45
     b6c:	eb000464 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(70,0, 'A');
     b70:	e3a00046 	mov	r0, #70	; 0x46
     b74:	e3a01000 	mov	r1, #0
     b78:	e3a02041 	mov	r2, #65	; 0x41
     b7c:	eb000460 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(71,0, 'S');
     b80:	e3a00047 	mov	r0, #71	; 0x47
     b84:	e3a01000 	mov	r1, #0
     b88:	e3a02053 	mov	r2, #83	; 0x53
     b8c:	eb00045c 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(72,0, 'E');
     b90:	e3a00048 	mov	r0, #72	; 0x48
     b94:	e3a01000 	mov	r1, #0
     b98:	e3a02045 	mov	r2, #69	; 0x45
     b9c:	eb000458 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(73,0, ' ');
     ba0:	e3a00049 	mov	r0, #73	; 0x49
     ba4:	e3a01000 	mov	r1, #0
     ba8:	e3a02020 	mov	r2, #32
     bac:	eb000454 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(74,0, 'V');
     bb0:	e3a0004a 	mov	r0, #74	; 0x4a
     bb4:	e3a01000 	mov	r1, #0
     bb8:	e3a02056 	mov	r2, #86	; 0x56
     bbc:	eb000450 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(75,0, 'O');
     bc0:	e3a0004b 	mov	r0, #75	; 0x4b
     bc4:	e3a01000 	mov	r1, #0
     bc8:	e3a0204f 	mov	r2, #79	; 0x4f
     bcc:	eb00044c 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(76,0, 'L');
     bd0:	e3a0004c 	mov	r0, #76	; 0x4c
     bd4:	e3a01000 	mov	r1, #0
     bd8:	e3a0204c 	mov	r2, #76	; 0x4c
     bdc:	eb000448 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(77,0, 'U');
     be0:	e3a0004d 	mov	r0, #77	; 0x4d
     be4:	e3a01000 	mov	r1, #0
     be8:	e3a02055 	mov	r2, #85	; 0x55
     bec:	eb000444 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(78,0, 'M');
     bf0:	e3a0004e 	mov	r0, #78	; 0x4e
     bf4:	e3a01000 	mov	r1, #0
     bf8:	e3a0204d 	mov	r2, #77	; 0x4d
     bfc:	eb000440 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(79,0, 'E');
     c00:	e3a0004f 	mov	r0, #79	; 0x4f
     c04:	e3a01000 	mov	r1, #0
     c08:	e3a02045 	mov	r2, #69	; 0x45
     c0c:	eb00043c 	bl	1d04 <VGA_write_char_ASM>

	VGA_write_char_ASM(61,1, 'V');
     c10:	e3a0003d 	mov	r0, #61	; 0x3d
     c14:	e3a01001 	mov	r1, #1
     c18:	e3a02056 	mov	r2, #86	; 0x56
     c1c:	eb000438 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(62,1, ' ');
     c20:	e3a0003e 	mov	r0, #62	; 0x3e
     c24:	e3a01001 	mov	r1, #1
     c28:	e3a02020 	mov	r2, #32
     c2c:	eb000434 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(63,1, '=');
     c30:	e3a0003f 	mov	r0, #63	; 0x3f
     c34:	e3a01001 	mov	r1, #1
     c38:	e3a0203d 	mov	r2, #61	; 0x3d
     c3c:	eb000430 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(64,1, ' ');
     c40:	e3a00040 	mov	r0, #64	; 0x40
     c44:	e3a01001 	mov	r1, #1
     c48:	e3a02020 	mov	r2, #32
     c4c:	eb00042c 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(65,1, 'I');
     c50:	e3a00041 	mov	r0, #65	; 0x41
     c54:	e3a01001 	mov	r1, #1
     c58:	e3a02049 	mov	r2, #73	; 0x49
     c5c:	eb000428 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(66,1, 'N');
     c60:	e3a00042 	mov	r0, #66	; 0x42
     c64:	e3a01001 	mov	r1, #1
     c68:	e3a0204e 	mov	r2, #78	; 0x4e
     c6c:	eb000424 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(67,1, 'C');
     c70:	e3a00043 	mov	r0, #67	; 0x43
     c74:	e3a01001 	mov	r1, #1
     c78:	e3a02043 	mov	r2, #67	; 0x43
     c7c:	eb000420 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(68,1, 'R');
     c80:	e3a00044 	mov	r0, #68	; 0x44
     c84:	e3a01001 	mov	r1, #1
     c88:	e3a02052 	mov	r2, #82	; 0x52
     c8c:	eb00041c 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(69,1, 'E');
     c90:	e3a00045 	mov	r0, #69	; 0x45
     c94:	e3a01001 	mov	r1, #1
     c98:	e3a02045 	mov	r2, #69	; 0x45
     c9c:	eb000418 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(70,1, 'A');
     ca0:	e3a00046 	mov	r0, #70	; 0x46
     ca4:	e3a01001 	mov	r1, #1
     ca8:	e3a02041 	mov	r2, #65	; 0x41
     cac:	eb000414 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(71,1, 'S');
     cb0:	e3a00047 	mov	r0, #71	; 0x47
     cb4:	e3a01001 	mov	r1, #1
     cb8:	e3a02053 	mov	r2, #83	; 0x53
     cbc:	eb000410 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(72,1, 'E');
     cc0:	e3a00048 	mov	r0, #72	; 0x48
     cc4:	e3a01001 	mov	r1, #1
     cc8:	e3a02045 	mov	r2, #69	; 0x45
     ccc:	eb00040c 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(73,1, ' ');
     cd0:	e3a00049 	mov	r0, #73	; 0x49
     cd4:	e3a01001 	mov	r1, #1
     cd8:	e3a02020 	mov	r2, #32
     cdc:	eb000408 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(74,1, 'V');
     ce0:	e3a0004a 	mov	r0, #74	; 0x4a
     ce4:	e3a01001 	mov	r1, #1
     ce8:	e3a02056 	mov	r2, #86	; 0x56
     cec:	eb000404 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(75,1, 'O');
     cf0:	e3a0004b 	mov	r0, #75	; 0x4b
     cf4:	e3a01001 	mov	r1, #1
     cf8:	e3a0204f 	mov	r2, #79	; 0x4f
     cfc:	eb000400 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(76,1, 'L');
     d00:	e3a0004c 	mov	r0, #76	; 0x4c
     d04:	e3a01001 	mov	r1, #1
     d08:	e3a0204c 	mov	r2, #76	; 0x4c
     d0c:	eb0003fc 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(77,1, 'U');
     d10:	e3a0004d 	mov	r0, #77	; 0x4d
     d14:	e3a01001 	mov	r1, #1
     d18:	e3a02055 	mov	r2, #85	; 0x55
     d1c:	eb0003f8 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(78,1, 'M');
     d20:	e3a0004e 	mov	r0, #78	; 0x4e
     d24:	e3a01001 	mov	r1, #1
     d28:	e3a0204d 	mov	r2, #77	; 0x4d
     d2c:	eb0003f4 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(79,1, 'E');
     d30:	e3a0004f 	mov	r0, #79	; 0x4f
     d34:	e3a01001 	mov	r1, #1
     d38:	e3a02045 	mov	r2, #69	; 0x45
     d3c:	eb0003f0 	bl	1d04 <VGA_write_char_ASM>

	VGA_write_char_ASM(61,2, 'B');
     d40:	e3a0003d 	mov	r0, #61	; 0x3d
     d44:	e3a01002 	mov	r1, #2
     d48:	e3a02042 	mov	r2, #66	; 0x42
     d4c:	eb0003ec 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(62,2, ' ');
     d50:	e3a0003e 	mov	r0, #62	; 0x3e
     d54:	e3a01002 	mov	r1, #2
     d58:	e3a02020 	mov	r2, #32
     d5c:	eb0003e8 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(63,2, '=');
     d60:	e3a0003f 	mov	r0, #63	; 0x3f
     d64:	e3a01002 	mov	r1, #2
     d68:	e3a0203d 	mov	r2, #61	; 0x3d
     d6c:	eb0003e4 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(64,2, ' ');
     d70:	e3a00040 	mov	r0, #64	; 0x40
     d74:	e3a01002 	mov	r1, #2
     d78:	e3a02020 	mov	r2, #32
     d7c:	eb0003e0 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(65,2, 'D');
     d80:	e3a00041 	mov	r0, #65	; 0x41
     d84:	e3a01002 	mov	r1, #2
     d88:	e3a02044 	mov	r2, #68	; 0x44
     d8c:	eb0003dc 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(66,2, 'E');
     d90:	e3a00042 	mov	r0, #66	; 0x42
     d94:	e3a01002 	mov	r1, #2
     d98:	e3a02045 	mov	r2, #69	; 0x45
     d9c:	eb0003d8 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(67,2, 'C');
     da0:	e3a00043 	mov	r0, #67	; 0x43
     da4:	e3a01002 	mov	r1, #2
     da8:	e3a02043 	mov	r2, #67	; 0x43
     dac:	eb0003d4 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(68,2, 'R');
     db0:	e3a00044 	mov	r0, #68	; 0x44
     db4:	e3a01002 	mov	r1, #2
     db8:	e3a02052 	mov	r2, #82	; 0x52
     dbc:	eb0003d0 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(69,2, 'E');
     dc0:	e3a00045 	mov	r0, #69	; 0x45
     dc4:	e3a01002 	mov	r1, #2
     dc8:	e3a02045 	mov	r2, #69	; 0x45
     dcc:	eb0003cc 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(70,2, 'A');
     dd0:	e3a00046 	mov	r0, #70	; 0x46
     dd4:	e3a01002 	mov	r1, #2
     dd8:	e3a02041 	mov	r2, #65	; 0x41
     ddc:	eb0003c8 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(71,2, 'S');
     de0:	e3a00047 	mov	r0, #71	; 0x47
     de4:	e3a01002 	mov	r1, #2
     de8:	e3a02053 	mov	r2, #83	; 0x53
     dec:	eb0003c4 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(72,2, 'E');
     df0:	e3a00048 	mov	r0, #72	; 0x48
     df4:	e3a01002 	mov	r1, #2
     df8:	e3a02045 	mov	r2, #69	; 0x45
     dfc:	eb0003c0 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(73,2, ' ');
     e00:	e3a00049 	mov	r0, #73	; 0x49
     e04:	e3a01002 	mov	r1, #2
     e08:	e3a02020 	mov	r2, #32
     e0c:	eb0003bc 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(74,2, 'O');
     e10:	e3a0004a 	mov	r0, #74	; 0x4a
     e14:	e3a01002 	mov	r1, #2
     e18:	e3a0204f 	mov	r2, #79	; 0x4f
     e1c:	eb0003b8 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(75,2, 'C');
     e20:	e3a0004b 	mov	r0, #75	; 0x4b
     e24:	e3a01002 	mov	r1, #2
     e28:	e3a02043 	mov	r2, #67	; 0x43
     e2c:	eb0003b4 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(76,2, 'T');
     e30:	e3a0004c 	mov	r0, #76	; 0x4c
     e34:	e3a01002 	mov	r1, #2
     e38:	e3a02054 	mov	r2, #84	; 0x54
     e3c:	eb0003b0 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(77,2, 'A');
     e40:	e3a0004d 	mov	r0, #77	; 0x4d
     e44:	e3a01002 	mov	r1, #2
     e48:	e3a02041 	mov	r2, #65	; 0x41
     e4c:	eb0003ac 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(78,2, 'V');
     e50:	e3a0004e 	mov	r0, #78	; 0x4e
     e54:	e3a01002 	mov	r1, #2
     e58:	e3a02056 	mov	r2, #86	; 0x56
     e5c:	eb0003a8 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(79,2, 'E');
     e60:	e3a0004f 	mov	r0, #79	; 0x4f
     e64:	e3a01002 	mov	r1, #2
     e68:	e3a02045 	mov	r2, #69	; 0x45
     e6c:	eb0003a4 	bl	1d04 <VGA_write_char_ASM>

	VGA_write_char_ASM(61,3, 'N');
     e70:	e3a0003d 	mov	r0, #61	; 0x3d
     e74:	e3a01003 	mov	r1, #3
     e78:	e3a0204e 	mov	r2, #78	; 0x4e
     e7c:	eb0003a0 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(62,3, ' ');
     e80:	e3a0003e 	mov	r0, #62	; 0x3e
     e84:	e3a01003 	mov	r1, #3
     e88:	e3a02020 	mov	r2, #32
     e8c:	eb00039c 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(63,3, '=');
     e90:	e3a0003f 	mov	r0, #63	; 0x3f
     e94:	e3a01003 	mov	r1, #3
     e98:	e3a0203d 	mov	r2, #61	; 0x3d
     e9c:	eb000398 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(64,3, ' ');
     ea0:	e3a00040 	mov	r0, #64	; 0x40
     ea4:	e3a01003 	mov	r1, #3
     ea8:	e3a02020 	mov	r2, #32
     eac:	eb000394 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(65,3, 'I');
     eb0:	e3a00041 	mov	r0, #65	; 0x41
     eb4:	e3a01003 	mov	r1, #3
     eb8:	e3a02049 	mov	r2, #73	; 0x49
     ebc:	eb000390 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(66,3, 'N');
     ec0:	e3a00042 	mov	r0, #66	; 0x42
     ec4:	e3a01003 	mov	r1, #3
     ec8:	e3a0204e 	mov	r2, #78	; 0x4e
     ecc:	eb00038c 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(67,3, 'C');
     ed0:	e3a00043 	mov	r0, #67	; 0x43
     ed4:	e3a01003 	mov	r1, #3
     ed8:	e3a02043 	mov	r2, #67	; 0x43
     edc:	eb000388 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(68,3, 'R');
     ee0:	e3a00044 	mov	r0, #68	; 0x44
     ee4:	e3a01003 	mov	r1, #3
     ee8:	e3a02052 	mov	r2, #82	; 0x52
     eec:	eb000384 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(69,3, 'E');
     ef0:	e3a00045 	mov	r0, #69	; 0x45
     ef4:	e3a01003 	mov	r1, #3
     ef8:	e3a02045 	mov	r2, #69	; 0x45
     efc:	eb000380 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(70,3, 'A');
     f00:	e3a00046 	mov	r0, #70	; 0x46
     f04:	e3a01003 	mov	r1, #3
     f08:	e3a02041 	mov	r2, #65	; 0x41
     f0c:	eb00037c 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(71,3, 'S');
     f10:	e3a00047 	mov	r0, #71	; 0x47
     f14:	e3a01003 	mov	r1, #3
     f18:	e3a02053 	mov	r2, #83	; 0x53
     f1c:	eb000378 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(72,3, 'E');
     f20:	e3a00048 	mov	r0, #72	; 0x48
     f24:	e3a01003 	mov	r1, #3
     f28:	e3a02045 	mov	r2, #69	; 0x45
     f2c:	eb000374 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(73,3, ' ');
     f30:	e3a00049 	mov	r0, #73	; 0x49
     f34:	e3a01003 	mov	r1, #3
     f38:	e3a02020 	mov	r2, #32
     f3c:	eb000370 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(74,3, 'O');
     f40:	e3a0004a 	mov	r0, #74	; 0x4a
     f44:	e3a01003 	mov	r1, #3
     f48:	e3a0204f 	mov	r2, #79	; 0x4f
     f4c:	eb00036c 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(75,3, 'C');
     f50:	e3a0004b 	mov	r0, #75	; 0x4b
     f54:	e3a01003 	mov	r1, #3
     f58:	e3a02043 	mov	r2, #67	; 0x43
     f5c:	eb000368 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(76,3, 'T');
     f60:	e3a0004c 	mov	r0, #76	; 0x4c
     f64:	e3a01003 	mov	r1, #3
     f68:	e3a02054 	mov	r2, #84	; 0x54
     f6c:	eb000364 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(77,3, 'A');
     f70:	e3a0004d 	mov	r0, #77	; 0x4d
     f74:	e3a01003 	mov	r1, #3
     f78:	e3a02041 	mov	r2, #65	; 0x41
     f7c:	eb000360 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(78,3, 'V');
     f80:	e3a0004e 	mov	r0, #78	; 0x4e
     f84:	e3a01003 	mov	r1, #3
     f88:	e3a02056 	mov	r2, #86	; 0x56
     f8c:	eb00035c 	bl	1d04 <VGA_write_char_ASM>
	VGA_write_char_ASM(79,3, 'E');
     f90:	e3a0004f 	mov	r0, #79	; 0x4f
     f94:	e3a01003 	mov	r1, #3
     f98:	e3a02045 	mov	r2, #69	; 0x45
     f9c:	eb000358 	bl	1d04 <VGA_write_char_ASM>
}
     fa0:	e8bd8800 	pop	{r11, pc}

00000fa4 <main>:

int main() {
     fa4:	e92d4800 	push	{r11, lr}
     fa8:	e28db004 	add	r11, sp, #4
     fac:	e24dd098 	sub	sp, sp, #152	; 0x98
	int samples = 0;
     fb0:	e3a03000 	mov	r3, #0
     fb4:	e50b3008 	str	r3, [r11, #-8]
	char* data;		// PS/2 port address
	float f = 0;	// frequency of note to play
     fb8:	e3a03000 	mov	r3, #0
     fbc:	e50b300c 	str	r3, [r11, #-12]

	int mode = 0;  			//mode of the synth (wave or piano keyboard)
     fc0:	e3a03000 	mov	r3, #0
     fc4:	e50b3010 	str	r3, [r11, #-16]
	int oldmode = 0;
     fc8:	e3a03000 	mov	r3, #0
     fcc:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	int octave = 3;			// current octave (range 1 to 5)
     fd0:	e3a03003 	mov	r3, #3
     fd4:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	int oldoctave = 3;
     fd8:	e3a03003 	mov	r3, #3
     fdc:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	float oldf = 0;			// old frequency (used for updating screen)
     fe0:	e3a03000 	mov	r3, #0
     fe4:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	int oldv = 0; 			// old volume (used for updating screen)
     fe8:	e3a03000 	mov	r3, #0
     fec:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc

	int clock = 0;			// typematic variables
     ff0:	e3a03000 	mov	r3, #0
     ff4:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0
	int delay = 1;
     ff8:	e3a03001 	mov	r3, #1
     ffc:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
	int bcode = 0;
    1000:	e3a03000 	mov	r3, #0
    1004:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
	char current = 0;		// store 3 codes from keyboard
    1008:	e3a03000 	mov	r3, #0
    100c:	e54b3041 	strb	r3, [r11, #-65]	; 0xffffffbf
	char previous = 0;			// from oldest to newest: previous, current, input
    1010:	e3a03000 	mov	r3, #0
    1014:	e54b3042 	strb	r3, [r11, #-66]	; 0xffffffbe

	int keystate[8] = {0, 0, 0, 0, 0, 0, 0, 0, 0};		// TODO: make sure we're still using this
    1018:	e3a03000 	mov	r3, #0
    101c:	e50b3078 	str	r3, [r11, #-120]	; 0xffffff88
    1020:	e3a03000 	mov	r3, #0
    1024:	e50b3074 	str	r3, [r11, #-116]	; 0xffffff8c
    1028:	e3a03000 	mov	r3, #0
    102c:	e50b3070 	str	r3, [r11, #-112]	; 0xffffff90
    1030:	e3a03000 	mov	r3, #0
    1034:	e50b306c 	str	r3, [r11, #-108]	; 0xffffff94
    1038:	e3a03000 	mov	r3, #0
    103c:	e50b3068 	str	r3, [r11, #-104]	; 0xffffff98
    1040:	e3a03000 	mov	r3, #0
    1044:	e50b3064 	str	r3, [r11, #-100]	; 0xffffff9c
    1048:	e3a03000 	mov	r3, #0
    104c:	e50b3060 	str	r3, [r11, #-96]	; 0xffffffa0
    1050:	e3a03000 	mov	r3, #0
    1054:	e50b305c 	str	r3, [r11, #-92]	; 0xffffffa4
	float freqs[8] = {130.813, 146.832, 164.814, 174.614, 195.998, 220.000, 246.942, 261.626};
    1058:	e3033654 	movw	r3, #13908	; 0x3654
    105c:	e3403000 	movt	r3, #0
    1060:	e24bc098 	sub	r12, r11, #152	; 0x98
    1064:	e1a0e003 	mov	lr, r3
    1068:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    106c:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    1070:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
    1074:	e88c000f 	stm	r12, {r0, r1, r2, r3}

	displayInstructions();	// display info to the user
    1078:	ebfffe54 	bl	9d0 <displayInstructions>

	while(1) {
		int output = 0;
    107c:	e3a03000 	mov	r3, #0
    1080:	e50b3048 	str	r3, [r11, #-72]	; 0xffffffb8
		char input = *data;
    1084:	e51b304c 	ldr	r3, [r11, #-76]	; 0xffffffb4
    1088:	e5d33000 	ldrb	r3, [r3]
    108c:	e54b304d 	strb	r3, [r11, #-77]	; 0xffffffb3

		// move into piano mode if any of the slider switches are on
		if (read_slider_switches_ASM()) {
    1090:	eb0002f7 	bl	1c74 <read_slider_switches_ASM>
    1094:	e1a03000 	mov	r3, r0
    1098:	e3530000 	cmp	r3, #0
    109c:	0a000002 	beq	10ac <main+0x108>
			mode = 1;
    10a0:	e3a03001 	mov	r3, #1
    10a4:	e50b3010 	str	r3, [r11, #-16]
    10a8:	ea000001 	b	10b4 <main+0x110>
		} else {
			mode = 0;
    10ac:	e3a03000 	mov	r3, #0
    10b0:	e50b3010 	str	r3, [r11, #-16]
		}

		// if the RVALID flag is 1, enter this if block
		if (read_ps2_data_ASM(data) || bcode) {
    10b4:	e51b004c 	ldr	r0, [r11, #-76]	; 0xffffffb4
    10b8:	eb000274 	bl	1a90 <read_ps2_data_ASM>
    10bc:	e1a03000 	mov	r3, r0
    10c0:	e3530000 	cmp	r3, #0
    10c4:	1a000002 	bne	10d4 <main+0x130>
    10c8:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    10cc:	e3530000 	cmp	r3, #0
    10d0:	0a0000c6 	beq	13f0 <main+0x44c>
			VGA_write_byte_ASM(20 + delay++, 7, input);	// TODO: remove
    10d4:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    10d8:	e2832014 	add	r2, r3, #20
    10dc:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    10e0:	e2833001 	add	r3, r3, #1
    10e4:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
    10e8:	e55b304d 	ldrb	r3, [r11, #-77]	; 0xffffffb3
    10ec:	e1a00002 	mov	r0, r2
    10f0:	e3a01007 	mov	r1, #7
    10f4:	e1a02003 	mov	r2, r3
    10f8:	eb00030e 	bl	1d38 <VGA_write_byte_ASM>

			if (bcode) {						// if the previous code was a break code, turn off the appropriate key in the array
    10fc:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    1100:	e3530000 	cmp	r3, #0
    1104:	0a000031 	beq	11d0 <main+0x22c>
				if (input == 0x1C) {
    1108:	e55b304d 	ldrb	r3, [r11, #-77]	; 0xffffffb3
    110c:	e353001c 	cmp	r3, #28
    1110:	1a000002 	bne	1120 <main+0x17c>
					keystate[0] = 0;
    1114:	e3a03000 	mov	r3, #0
    1118:	e50b3078 	str	r3, [r11, #-120]	; 0xffffff88
    111c:	ea000028 	b	11c4 <main+0x220>
				} else if (input == 0x1B) {
    1120:	e55b304d 	ldrb	r3, [r11, #-77]	; 0xffffffb3
    1124:	e353001b 	cmp	r3, #27
    1128:	1a000002 	bne	1138 <main+0x194>
					keystate[1] = 0;
    112c:	e3a03000 	mov	r3, #0
    1130:	e50b3074 	str	r3, [r11, #-116]	; 0xffffff8c
    1134:	ea000022 	b	11c4 <main+0x220>
				} else if (input == 0x23) {
    1138:	e55b304d 	ldrb	r3, [r11, #-77]	; 0xffffffb3
    113c:	e3530023 	cmp	r3, #35	; 0x23
    1140:	1a000002 	bne	1150 <main+0x1ac>
					keystate[2] = 0;
    1144:	e3a03000 	mov	r3, #0
    1148:	e50b3070 	str	r3, [r11, #-112]	; 0xffffff90
    114c:	ea00001c 	b	11c4 <main+0x220>
				} else if (input == 0x2B) {
    1150:	e55b304d 	ldrb	r3, [r11, #-77]	; 0xffffffb3
    1154:	e353002b 	cmp	r3, #43	; 0x2b
    1158:	1a000002 	bne	1168 <main+0x1c4>
					keystate[3] = 0;
    115c:	e3a03000 	mov	r3, #0
    1160:	e50b306c 	str	r3, [r11, #-108]	; 0xffffff94
    1164:	ea000016 	b	11c4 <main+0x220>
				} else if (input == 0x3B) {
    1168:	e55b304d 	ldrb	r3, [r11, #-77]	; 0xffffffb3
    116c:	e353003b 	cmp	r3, #59	; 0x3b
    1170:	1a000002 	bne	1180 <main+0x1dc>
					keystate[4] = 0;
    1174:	e3a03000 	mov	r3, #0
    1178:	e50b3068 	str	r3, [r11, #-104]	; 0xffffff98
    117c:	ea000010 	b	11c4 <main+0x220>
				} else if (input == 0x42) {
    1180:	e55b304d 	ldrb	r3, [r11, #-77]	; 0xffffffb3
    1184:	e3530042 	cmp	r3, #66	; 0x42
    1188:	1a000002 	bne	1198 <main+0x1f4>
					keystate[5] = 0;
    118c:	e3a03000 	mov	r3, #0
    1190:	e50b3064 	str	r3, [r11, #-100]	; 0xffffff9c
    1194:	ea00000a 	b	11c4 <main+0x220>
				} else if (input == 0x4B) {
    1198:	e55b304d 	ldrb	r3, [r11, #-77]	; 0xffffffb3
    119c:	e353004b 	cmp	r3, #75	; 0x4b
    11a0:	1a000002 	bne	11b0 <main+0x20c>
					keystate[6] = 0;
    11a4:	e3a03000 	mov	r3, #0
    11a8:	e50b3060 	str	r3, [r11, #-96]	; 0xffffffa0
    11ac:	ea000004 	b	11c4 <main+0x220>
				} else if (input == 0x4C) {
    11b0:	e55b304d 	ldrb	r3, [r11, #-77]	; 0xffffffb3
    11b4:	e353004c 	cmp	r3, #76	; 0x4c
    11b8:	1a000001 	bne	11c4 <main+0x220>
					keystate[7] = 0;
    11bc:	e3a03000 	mov	r3, #0
    11c0:	e50b305c 	str	r3, [r11, #-92]	; 0xffffffa4
				}
				bcode = 0;
    11c4:	e3a03000 	mov	r3, #0
    11c8:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
    11cc:	ea00006e 	b	138c <main+0x3e8>
			} else {
				if (input == 0xF0 || input == 0xFE || input == 0xFA) {		// if we see a break code, we'll head to a different section on the next loop
    11d0:	e55b304d 	ldrb	r3, [r11, #-77]	; 0xffffffb3
    11d4:	e35300f0 	cmp	r3, #240	; 0xf0
    11d8:	0a000005 	beq	11f4 <main+0x250>
    11dc:	e55b304d 	ldrb	r3, [r11, #-77]	; 0xffffffb3
    11e0:	e35300fe 	cmp	r3, #254	; 0xfe
    11e4:	0a000002 	beq	11f4 <main+0x250>
    11e8:	e55b304d 	ldrb	r3, [r11, #-77]	; 0xffffffb3
    11ec:	e35300fa 	cmp	r3, #250	; 0xfa
    11f0:	1a000002 	bne	1200 <main+0x25c>
					bcode = 1;
    11f4:	e3a03001 	mov	r3, #1
    11f8:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
    11fc:	ea000062 	b	138c <main+0x3e8>
				} else if (input == 0x1C) {		// keyboard keypresses
    1200:	e55b304d 	ldrb	r3, [r11, #-77]	; 0xffffffb3
    1204:	e353001c 	cmp	r3, #28
    1208:	1a000002 	bne	1218 <main+0x274>
					keystate[0] = 1;
    120c:	e3a03001 	mov	r3, #1
    1210:	e50b3078 	str	r3, [r11, #-120]	; 0xffffff88
    1214:	ea00005c 	b	138c <main+0x3e8>
				} else if (input == 0x1B) {
    1218:	e55b304d 	ldrb	r3, [r11, #-77]	; 0xffffffb3
    121c:	e353001b 	cmp	r3, #27
    1220:	1a000002 	bne	1230 <main+0x28c>
					keystate[1] = 1;
    1224:	e3a03001 	mov	r3, #1
    1228:	e50b3074 	str	r3, [r11, #-116]	; 0xffffff8c
    122c:	ea000056 	b	138c <main+0x3e8>
				} else if (input == 0x23) {
    1230:	e55b304d 	ldrb	r3, [r11, #-77]	; 0xffffffb3
    1234:	e3530023 	cmp	r3, #35	; 0x23
    1238:	1a000002 	bne	1248 <main+0x2a4>
					keystate[2] = 1;
    123c:	e3a03001 	mov	r3, #1
    1240:	e50b3070 	str	r3, [r11, #-112]	; 0xffffff90
    1244:	ea000050 	b	138c <main+0x3e8>
				} else if (input == 0x2B) {
    1248:	e55b304d 	ldrb	r3, [r11, #-77]	; 0xffffffb3
    124c:	e353002b 	cmp	r3, #43	; 0x2b
    1250:	1a000002 	bne	1260 <main+0x2bc>
					keystate[3] = 1;
    1254:	e3a03001 	mov	r3, #1
    1258:	e50b306c 	str	r3, [r11, #-108]	; 0xffffff94
    125c:	ea00004a 	b	138c <main+0x3e8>
				} else if (input == 0x3B) {
    1260:	e55b304d 	ldrb	r3, [r11, #-77]	; 0xffffffb3
    1264:	e353003b 	cmp	r3, #59	; 0x3b
    1268:	1a000002 	bne	1278 <main+0x2d4>
					keystate[4] = 1;
    126c:	e3a03001 	mov	r3, #1
    1270:	e50b3068 	str	r3, [r11, #-104]	; 0xffffff98
    1274:	ea000044 	b	138c <main+0x3e8>
				} else if (input == 0x42) {
    1278:	e55b304d 	ldrb	r3, [r11, #-77]	; 0xffffffb3
    127c:	e3530042 	cmp	r3, #66	; 0x42
    1280:	1a000002 	bne	1290 <main+0x2ec>
					keystate[5] = 1;
    1284:	e3a03001 	mov	r3, #1
    1288:	e50b3064 	str	r3, [r11, #-100]	; 0xffffff9c
    128c:	ea00003e 	b	138c <main+0x3e8>
				} else if (input == 0x4B) {
    1290:	e55b304d 	ldrb	r3, [r11, #-77]	; 0xffffffb3
    1294:	e353004b 	cmp	r3, #75	; 0x4b
    1298:	1a000002 	bne	12a8 <main+0x304>
					keystate[6] = 1;
    129c:	e3a03001 	mov	r3, #1
    12a0:	e50b3060 	str	r3, [r11, #-96]	; 0xffffffa0
    12a4:	ea000038 	b	138c <main+0x3e8>
				} else if (input == 0x4C) {
    12a8:	e55b304d 	ldrb	r3, [r11, #-77]	; 0xffffffb3
    12ac:	e353004c 	cmp	r3, #76	; 0x4c
    12b0:	1a000002 	bne	12c0 <main+0x31c>
					keystate[7] = 1;
    12b4:	e3a03001 	mov	r3, #1
    12b8:	e50b305c 	str	r3, [r11, #-92]	; 0xffffffa4
    12bc:	ea000032 	b	138c <main+0x3e8>
				} else if (input == 0x2A && volume < 7) {	// volume adjustments
    12c0:	e55b304d 	ldrb	r3, [r11, #-77]	; 0xffffffb3
    12c4:	e353002a 	cmp	r3, #42	; 0x2a
    12c8:	1a00000c 	bne	1300 <main+0x35c>
    12cc:	e30336d8 	movw	r3, #14040	; 0x36d8
    12d0:	e3403000 	movt	r3, #0
    12d4:	e5933000 	ldr	r3, [r3]
    12d8:	e3530006 	cmp	r3, #6
    12dc:	ca000007 	bgt	1300 <main+0x35c>
					volume++;
    12e0:	e30336d8 	movw	r3, #14040	; 0x36d8
    12e4:	e3403000 	movt	r3, #0
    12e8:	e5933000 	ldr	r3, [r3]
    12ec:	e2832001 	add	r2, r3, #1
    12f0:	e30336d8 	movw	r3, #14040	; 0x36d8
    12f4:	e3403000 	movt	r3, #0
    12f8:	e5832000 	str	r2, [r3]
    12fc:	ea000022 	b	138c <main+0x3e8>
				} else if (input == 0x21 && volume > 0) {
    1300:	e55b304d 	ldrb	r3, [r11, #-77]	; 0xffffffb3
    1304:	e3530021 	cmp	r3, #33	; 0x21
    1308:	1a00000c 	bne	1340 <main+0x39c>
    130c:	e30336d8 	movw	r3, #14040	; 0x36d8
    1310:	e3403000 	movt	r3, #0
    1314:	e5933000 	ldr	r3, [r3]
    1318:	e3530000 	cmp	r3, #0
    131c:	da000007 	ble	1340 <main+0x39c>
					volume--;			
    1320:	e30336d8 	movw	r3, #14040	; 0x36d8
    1324:	e3403000 	movt	r3, #0
    1328:	e5933000 	ldr	r3, [r3]
    132c:	e2432001 	sub	r2, r3, #1
    1330:	e30336d8 	movw	r3, #14040	; 0x36d8
    1334:	e3403000 	movt	r3, #0
    1338:	e5832000 	str	r2, [r3]
    133c:	ea000012 	b	138c <main+0x3e8>
				} else if (input ==  0x31 && octave < 5) {	// octave adjustments
    1340:	e55b304d 	ldrb	r3, [r11, #-77]	; 0xffffffb3
    1344:	e3530031 	cmp	r3, #49	; 0x31
    1348:	1a000006 	bne	1368 <main+0x3c4>
    134c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1350:	e3530004 	cmp	r3, #4
    1354:	ca000003 	bgt	1368 <main+0x3c4>
					octave++;
    1358:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    135c:	e2833001 	add	r3, r3, #1
    1360:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
    1364:	ea000008 	b	138c <main+0x3e8>
				} else if (input == 0x32 && octave > 1) {
    1368:	e55b304d 	ldrb	r3, [r11, #-77]	; 0xffffffb3
    136c:	e3530032 	cmp	r3, #50	; 0x32
    1370:	1a000005 	bne	138c <main+0x3e8>
    1374:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1378:	e3530001 	cmp	r3, #1
    137c:	da000002 	ble	138c <main+0x3e8>
					octave--;
    1380:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1384:	e2433001 	sub	r3, r3, #1
    1388:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
				}
			}

			// TODO: remove
			int t;
			for (t = 0; t < 8; t++) {
    138c:	e3a03000 	mov	r3, #0
    1390:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
    1394:	ea000012 	b	13e4 <main+0x440>
				VGA_write_char_ASM(t + 20, 5, keystate[t] + 48);
    1398:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
    139c:	e2832014 	add	r2, r3, #20
    13a0:	e51b1030 	ldr	r1, [r11, #-48]	; 0xffffffd0
    13a4:	e3e03073 	mvn	r3, #115	; 0x73
    13a8:	e1a01101 	lsl	r1, r1, #2
    13ac:	e24b0004 	sub	r0, r11, #4
    13b0:	e0801001 	add	r1, r0, r1
    13b4:	e0813003 	add	r3, r1, r3
    13b8:	e5933000 	ldr	r3, [r3]
    13bc:	e6ef3073 	uxtb	r3, r3
    13c0:	e2833030 	add	r3, r3, #48	; 0x30
    13c4:	e6ef3073 	uxtb	r3, r3
    13c8:	e1a00002 	mov	r0, r2
    13cc:	e3a01005 	mov	r1, #5
    13d0:	e1a02003 	mov	r2, r3
    13d4:	eb00024a 	bl	1d04 <VGA_write_char_ASM>
				}
			}

			// TODO: remove
			int t;
			for (t = 0; t < 8; t++) {
    13d8:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
    13dc:	e2833001 	add	r3, r3, #1
    13e0:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
    13e4:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
    13e8:	e3530007 	cmp	r3, #7
    13ec:	daffffe9 	ble	1398 <main+0x3f4>
				VGA_write_char_ASM(t + 20, 5, keystate[t] + 48);
			}
		}

		// count the number of keys that are pressed and add the corresponding frequencies together
		float total = 0;
    13f0:	e3a03000 	mov	r3, #0
    13f4:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
		int hits = 0;
    13f8:	e3a03000 	mov	r3, #0
    13fc:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
		int i;
		for (i = 0; i < 8; i++) {
    1400:	e3a03000 	mov	r3, #0
    1404:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
    1408:	ea00001a 	b	1478 <main+0x4d4>
			if (keystate[i]) {
    140c:	e51b203c 	ldr	r2, [r11, #-60]	; 0xffffffc4
    1410:	e3e03073 	mvn	r3, #115	; 0x73
    1414:	e1a02102 	lsl	r2, r2, #2
    1418:	e24b1004 	sub	r1, r11, #4
    141c:	e0812002 	add	r2, r1, r2
    1420:	e0823003 	add	r3, r2, r3
    1424:	e5933000 	ldr	r3, [r3]
    1428:	e3530000 	cmp	r3, #0
    142c:	0a00000e 	beq	146c <main+0x4c8>
				total = total + freqs[i];
    1430:	e51b203c 	ldr	r2, [r11, #-60]	; 0xffffffc4
    1434:	e3e03093 	mvn	r3, #147	; 0x93
    1438:	e1a02102 	lsl	r2, r2, #2
    143c:	e24b0004 	sub	r0, r11, #4
    1440:	e0802002 	add	r2, r0, r2
    1444:	e0823003 	add	r3, r2, r3
    1448:	e5933000 	ldr	r3, [r3]
    144c:	e51b0034 	ldr	r0, [r11, #-52]	; 0xffffffcc
    1450:	e1a01003 	mov	r1, r3
    1454:	eb0005b4 	bl	2b2c <__addsf3>
    1458:	e1a03000 	mov	r3, r0
    145c:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
				hits++;
    1460:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
    1464:	e2833001 	add	r3, r3, #1
    1468:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8

		// count the number of keys that are pressed and add the corresponding frequencies together
		float total = 0;
		int hits = 0;
		int i;
		for (i = 0; i < 8; i++) {
    146c:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
    1470:	e2833001 	add	r3, r3, #1
    1474:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
    1478:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
    147c:	e3530007 	cmp	r3, #7
    1480:	daffffe1 	ble	140c <main+0x468>
				total = total + freqs[i];
				hits++;
			}
		}

		if (hits) {
    1484:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
    1488:	e3530000 	cmp	r3, #0
    148c:	0a000008 	beq	14b4 <main+0x510>
			// average the frequencies of all the key presses
			f = total / hits;
    1490:	e51b0038 	ldr	r0, [r11, #-56]	; 0xffffffc8
    1494:	eb000615 	bl	2cf0 <__aeabi_i2f>
    1498:	e1a03000 	mov	r3, r0
    149c:	e51b0034 	ldr	r0, [r11, #-52]	; 0xffffffcc
    14a0:	e1a01003 	mov	r1, r3
    14a4:	eb0006ae 	bl	2f64 <__aeabi_fdiv>
    14a8:	e1a03000 	mov	r3, r0
    14ac:	e50b300c 	str	r3, [r11, #-12]
    14b0:	ea000001 	b	14bc <main+0x518>
		} else {
			// all the keys are not pressed, no frequency
			f = 0;
    14b4:	e3a03000 	mov	r3, #0
    14b8:	e50b300c 	str	r3, [r11, #-12]
		}

		// display update graphics on screen if frequency, volume, mode, or octave have changed
		if (oldf != f || oldv != volume || oldmode != mode || oldoctave != octave) {
    14bc:	e51b0020 	ldr	r0, [r11, #-32]	; 0xffffffe0
    14c0:	e51b100c 	ldr	r1, [r11, #-12]
    14c4:	eb000725 	bl	3160 <__aeabi_fcmpeq>
    14c8:	e1a03000 	mov	r3, r0
    14cc:	e3530000 	cmp	r3, #0
    14d0:	0a00000d 	beq	150c <main+0x568>
    14d4:	e30336d8 	movw	r3, #14040	; 0x36d8
    14d8:	e3403000 	movt	r3, #0
    14dc:	e5933000 	ldr	r3, [r3]
    14e0:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
    14e4:	e1520003 	cmp	r2, r3
    14e8:	1a000007 	bne	150c <main+0x568>
    14ec:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    14f0:	e51b3010 	ldr	r3, [r11, #-16]
    14f4:	e1520003 	cmp	r2, r3
    14f8:	1a000003 	bne	150c <main+0x568>
    14fc:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    1500:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1504:	e1520003 	cmp	r2, r3
    1508:	0a000017 	beq	156c <main+0x5c8>
			// update variables
			oldf = f;
    150c:	e51b300c 	ldr	r3, [r11, #-12]
    1510:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
			oldv = volume;
    1514:	e30336d8 	movw	r3, #14040	; 0x36d8
    1518:	e3403000 	movt	r3, #0
    151c:	e5933000 	ldr	r3, [r3]
    1520:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc

			// depending on the mode, display the wave or the on-screen piano keyboard
			if (mode == 0){
    1524:	e51b3010 	ldr	r3, [r11, #-16]
    1528:	e3530000 	cmp	r3, #0
    152c:	1a000007 	bne	1550 <main+0x5ac>
				wave(f, volume, octave);
    1530:	e30336d8 	movw	r3, #14040	; 0x36d8
    1534:	e3403000 	movt	r3, #0
    1538:	e5933000 	ldr	r3, [r3]
    153c:	e51b000c 	ldr	r0, [r11, #-12]
    1540:	e1a01003 	mov	r1, r3
    1544:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1548:	ebfffc86 	bl	768 <wave>
    154c:	ea000002 	b	155c <main+0x5b8>
			} else {
				piano(f, octave);
    1550:	e51b000c 	ldr	r0, [r11, #-12]
    1554:	e51b1018 	ldr	r1, [r11, #-24]	; 0xffffffe8
    1558:	ebfffc30 	bl	620 <piano>
			}
			
			// update remaining variables
			oldmode = mode;
    155c:	e51b3010 	ldr	r3, [r11, #-16]
    1560:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
			oldoctave = octave;
    1564:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1568:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
		}

		// if frequency is 0, don't play anything
		if (f) {
    156c:	e51b000c 	ldr	r0, [r11, #-12]
    1570:	e3a01000 	mov	r1, #0
    1574:	eb0006f9 	bl	3160 <__aeabi_fcmpeq>
    1578:	e1a03000 	mov	r3, r0
    157c:	e3530000 	cmp	r3, #0
    1580:	1a00001b 	bne	15f4 <main+0x650>
			// generate audio sample
			int endOfSignal = 48000 / f;
    1584:	e3a00902 	mov	r0, #32768	; 0x8000
    1588:	e344073b 	movt	r0, #18235	; 0x473b
    158c:	e51b100c 	ldr	r1, [r11, #-12]
    1590:	eb000673 	bl	2f64 <__aeabi_fdiv>
    1594:	e1a03000 	mov	r3, r0
    1598:	e1a00003 	mov	r0, r3
    159c:	eb00070d 	bl	31d8 <__aeabi_f2iz>
    15a0:	e1a03000 	mov	r3, r0
    15a4:	e50b3054 	str	r3, [r11, #-84]	; 0xffffffac
			while (samples < endOfSignal) {		// iterate one period
    15a8:	ea00000a 	b	15d8 <main+0x634>
				// send a value
				int s = signal(f, samples, octave);
    15ac:	e51b000c 	ldr	r0, [r11, #-12]
    15b0:	e51b1008 	ldr	r1, [r11, #-8]
    15b4:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    15b8:	ebfffb48 	bl	2e0 <signal>
    15bc:	e50b0058 	str	r0, [r11, #-88]	; 0xffffffa8
				audio_write_data_ASM(s, s);								// send the signal to be outputted
    15c0:	e51b0058 	ldr	r0, [r11, #-88]	; 0xffffffa8
    15c4:	e51b1058 	ldr	r1, [r11, #-88]	; 0xffffffa8
    15c8:	eb0000bf 	bl	18cc <audio_write_data_ASM>
																			// don't need to check if there's space because the 
				//if (audio_write_data_ASM(s, s)) {						// decide whether keeping or removing this if condition changes the tune
					samples++;	// increment number of samples sent
    15cc:	e51b3008 	ldr	r3, [r11, #-8]
    15d0:	e2833001 	add	r3, r3, #1
    15d4:	e50b3008 	str	r3, [r11, #-8]

		// if frequency is 0, don't play anything
		if (f) {
			// generate audio sample
			int endOfSignal = 48000 / f;
			while (samples < endOfSignal) {		// iterate one period
    15d8:	e51b2008 	ldr	r2, [r11, #-8]
    15dc:	e51b3054 	ldr	r3, [r11, #-84]	; 0xffffffac
    15e0:	e1520003 	cmp	r2, r3
    15e4:	bafffff0 	blt	15ac <main+0x608>
																			// don't need to check if there's space because the 
				//if (audio_write_data_ASM(s, s)) {						// decide whether keeping or removing this if condition changes the tune
					samples++;	// increment number of samples sent
				//}
			}
			samples = 0;
    15e8:	e3a03000 	mov	r3, #0
    15ec:	e50b3008 	str	r3, [r11, #-8]
		}
	}
    15f0:	eafffea1 	b	107c <main+0xd8>
    15f4:	eafffea0 	b	107c <main+0xd8>

000015f8 <HEX_clear_ASM>:
    15f8:	e3a01000 	mov	r1, #0
    15fc:	ea000004 	b	1614 <WRITE>

00001600 <HEX_flood_ASM>:
    1600:	e3a0107f 	mov	r1, #127	; 0x7f
    1604:	ea000002 	b	1614 <WRITE>

00001608 <HEX_write_ASM>:
    1608:	e59f2064 	ldr	r2, [pc, #100]	; 1674 <PATTERNS+0x14>
    160c:	e7d21001 	ldrb	r1, [r2, r1]
    1610:	eaffffff 	b	1614 <WRITE>

00001614 <WRITE>:
    1614:	e92d0030 	push	{r4, r5}
    1618:	e59f2058 	ldr	r2, [pc, #88]	; 1678 <PATTERNS+0x18>
    161c:	e3a03000 	mov	r3, #0
    1620:	e3e050ff 	mvn	r5, #255	; 0xff

00001624 <LOOP>:
    1624:	e3100001 	tst	r0, #1
    1628:	0a000003 	beq	163c <CONTINUE>
    162c:	e5924000 	ldr	r4, [r2]
    1630:	e0044005 	and	r4, r4, r5
    1634:	e1844001 	orr	r4, r4, r1
    1638:	e5824000 	str	r4, [r2]

0000163c <CONTINUE>:
    163c:	e1a05c65 	ror	r5, r5, #24
    1640:	e1a01c61 	ror	r1, r1, #24
    1644:	e2833001 	add	r3, r3, #1
    1648:	e3530004 	cmp	r3, #4
    164c:	059f2028 	ldreq	r2, [pc, #40]	; 167c <PATTERNS+0x1c>
    1650:	e1b000a0 	lsrs	r0, r0, #1
    1654:	1afffff2 	bne	1624 <LOOP>
    1658:	e8bd0030 	pop	{r4, r5}
    165c:	e12fff1e 	bx	lr

00001660 <PATTERNS>:
    1660:	4f5b063f 	.word	0x4f5b063f
    1664:	077d6d66 	.word	0x077d6d66
    1668:	7c776f7f 	.word	0x7c776f7f
    166c:	71795e39 	.word	0x71795e39
    1670:	000000ff 	.word	0x000000ff
    1674:	00001660 	.word	0x00001660
    1678:	ff200020 	.word	0xff200020
    167c:	ff200030 	.word	0xff200030

00001680 <HPS_TIM_config_ASM>:
    1680:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    1684:	e3a01000 	mov	r1, #0
    1688:	e3a02001 	mov	r2, #1
    168c:	e5907000 	ldr	r7, [r0]
    1690:	eaffffff 	b	1694 <LOOP>

00001694 <LOOP>:
    1694:	e1170112 	tst	r7, r2, lsl r1
    1698:	0a000000 	beq	16a0 <CONTINUE>
    169c:	eb000004 	bl	16b4 <CONFIG>

000016a0 <CONTINUE>:
    16a0:	e2811001 	add	r1, r1, #1
    16a4:	e3510004 	cmp	r1, #4
    16a8:	bafffff9 	blt	1694 <LOOP>

000016ac <DONE>:
    16ac:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
    16b0:	e12fff1e 	bx	lr

000016b4 <CONFIG>:
    16b4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    16b8:	e59f30e4 	ldr	r3, [pc, #228]	; 17a4 <HPS_TIM_BASE+0x10>
    16bc:	e7934101 	ldr	r4, [r3, r1, lsl #2]
    16c0:	eb000005 	bl	16dc <DISABLE>
    16c4:	eb000008 	bl	16ec <SET_LOAD_VAL>
    16c8:	eb00000e 	bl	1708 <SET_LOAD_BIT>
    16cc:	eb000013 	bl	1720 <SET_INT_BIT>
    16d0:	eb000019 	bl	173c <SET_EN_BIT>
    16d4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    16d8:	e12fff1e 	bx	lr

000016dc <DISABLE>:
    16dc:	e5945008 	ldr	r5, [r4, #8]
    16e0:	e3c55001 	bic	r5, r5, #1
    16e4:	e5845008 	str	r5, [r4, #8]
    16e8:	e12fff1e 	bx	lr

000016ec <SET_LOAD_VAL>:
    16ec:	e5905004 	ldr	r5, [r0, #4]
    16f0:	e3a06019 	mov	r6, #25
    16f4:	e0050695 	mul	r5, r5, r6
    16f8:	e3510002 	cmp	r1, #2
    16fc:	b1a05105 	lsllt	r5, r5, #2
    1700:	e5845000 	str	r5, [r4]
    1704:	e12fff1e 	bx	lr

00001708 <SET_LOAD_BIT>:
    1708:	e5945008 	ldr	r5, [r4, #8]
    170c:	e5906008 	ldr	r6, [r0, #8]
    1710:	e3c55002 	bic	r5, r5, #2
    1714:	e1855086 	orr	r5, r5, r6, lsl #1
    1718:	e5845008 	str	r5, [r4, #8]
    171c:	e12fff1e 	bx	lr

00001720 <SET_INT_BIT>:
    1720:	e5945008 	ldr	r5, [r4, #8]
    1724:	e590600c 	ldr	r6, [r0, #12]
    1728:	e2266001 	eor	r6, r6, #1
    172c:	e3c55004 	bic	r5, r5, #4
    1730:	e1855106 	orr	r5, r5, r6, lsl #2
    1734:	e5845008 	str	r5, [r4, #8]
    1738:	e12fff1e 	bx	lr

0000173c <SET_EN_BIT>:
    173c:	e5945008 	ldr	r5, [r4, #8]
    1740:	e5906010 	ldr	r6, [r0, #16]
    1744:	e3c55001 	bic	r5, r5, #1
    1748:	e1855006 	orr	r5, r5, r6
    174c:	e5845008 	str	r5, [r4, #8]
    1750:	e12fff1e 	bx	lr

00001754 <HPS_TIM_clear_INT_ASM>:
    1754:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1758:	e3a01000 	mov	r1, #0
    175c:	e3a02001 	mov	r2, #1
    1760:	eaffffff 	b	1764 <INT_LOOP>

00001764 <INT_LOOP>:
    1764:	e1100112 	tst	r0, r2, lsl r1
    1768:	0a000000 	beq	1770 <INT_CONTINUE>
    176c:	eb000004 	bl	1784 <CLEAR_IT>

00001770 <INT_CONTINUE>:
    1770:	e2811001 	add	r1, r1, #1
    1774:	e3510004 	cmp	r1, #4
    1778:	bafffff9 	blt	1764 <INT_LOOP>

0000177c <INT_DONE>:
    177c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    1780:	e12fff1e 	bx	lr

00001784 <CLEAR_IT>:
    1784:	e59f3018 	ldr	r3, [pc, #24]	; 17a4 <HPS_TIM_BASE+0x10>
    1788:	e7933101 	ldr	r3, [r3, r1, lsl #2]
    178c:	e593300c 	ldr	r3, [r3, #12]
    1790:	e12fff1e 	bx	lr

00001794 <HPS_TIM_BASE>:
    1794:	ffc08000 	.word	0xffc08000
    1798:	ffc09000 	.word	0xffc09000
    179c:	ffd00000 	.word	0xffd00000
    17a0:	ffd01000 	.word	0xffd01000
    17a4:	00001794 	.word	0x00001794

000017a8 <A9_PRIV_TIM_ISR>:
	.global FPGA_JP1_ISR
	.global FPGA_JP2_ISR
	.global FPGA_PS2_DUAL_ISR
	
A9_PRIV_TIM_ISR:
	BX LR
    17a8:	e12fff1e 	bx	lr

000017ac <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
    17ac:	e12fff1e 	bx	lr

000017b0 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	BX LR
    17b0:	e12fff1e 	bx	lr

000017b4 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
    17b4:	e12fff1e 	bx	lr

000017b8 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
    17b8:	e12fff1e 	bx	lr

000017bc <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
    17bc:	e12fff1e 	bx	lr

000017c0 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
    17c0:	e12fff1e 	bx	lr

000017c4 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	BX LR
    17c4:	e12fff1e 	bx	lr

000017c8 <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
    17c8:	e12fff1e 	bx	lr

000017cc <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
    17cc:	e12fff1e 	bx	lr

000017d0 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
    17d0:	e12fff1e 	bx	lr

000017d4 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
    17d4:	e12fff1e 	bx	lr

000017d8 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
    17d8:	e12fff1e 	bx	lr

000017dc <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
    17dc:	e12fff1e 	bx	lr

000017e0 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
    17e0:	e12fff1e 	bx	lr

000017e4 <read_LEDs_ASM>:
    17e4:	e59f1010 	ldr	r1, [pc, #16]	; 17fc <write_LEDs_ASM+0xc>
    17e8:	e5910000 	ldr	r0, [r1]
    17ec:	e12fff1e 	bx	lr

000017f0 <write_LEDs_ASM>:
    17f0:	e59f1004 	ldr	r1, [pc, #4]	; 17fc <write_LEDs_ASM+0xc>
    17f4:	e5810000 	str	r0, [r1]
    17f8:	e12fff1e 	bx	lr
    17fc:	ff200000 	.word	0xff200000

00001800 <audio_read_data_ASM>:
    1800:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1804:	e92d0003 	push	{r0, r1}
    1808:	eb000093 	bl	1a5c <audio_read_ralc_ASM>
    180c:	e3500000 	cmp	r0, #0
    1810:	08bd0003 	popeq	{r0, r1}
    1814:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    1818:	03a00000 	moveq	r0, #0
    181c:	012fff1e 	bxeq	lr
    1820:	eb000092 	bl	1a70 <audio_read_rarc_ASM>
    1824:	e3500000 	cmp	r0, #0
    1828:	08bd0003 	popeq	{r0, r1}
    182c:	03a00000 	moveq	r0, #0
    1830:	012fff1e 	bxeq	lr
    1834:	e8bd0003 	pop	{r0, r1}
    1838:	e59f2240 	ldr	r2, [pc, #576]	; 1a80 <audio_read_rarc_ASM+0x10>
    183c:	e5922000 	ldr	r2, [r2]
    1840:	e5802000 	str	r2, [r0]
    1844:	e59f3238 	ldr	r3, [pc, #568]	; 1a84 <audio_read_rarc_ASM+0x14>
    1848:	e5933000 	ldr	r3, [r3]
    184c:	e5813000 	str	r3, [r1]
    1850:	e3a00001 	mov	r0, #1

00001854 <audio_read_leftdata_ASM>:
    1854:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1858:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    185c:	eb00007e 	bl	1a5c <audio_read_ralc_ASM>
    1860:	e3500000 	cmp	r0, #0
    1864:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
    1868:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    186c:	03a00000 	moveq	r0, #0
    1870:	012fff1e 	bxeq	lr
    1874:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    1878:	e59f2200 	ldr	r2, [pc, #512]	; 1a80 <audio_read_rarc_ASM+0x10>
    187c:	e5922000 	ldr	r2, [r2]
    1880:	e5802000 	str	r2, [r0]
    1884:	e3a00001 	mov	r0, #1
    1888:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    188c:	e12fff1e 	bx	lr

00001890 <audio_read_rightdata_ASM>:
    1890:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1894:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    1898:	eb000074 	bl	1a70 <audio_read_rarc_ASM>
    189c:	e3500000 	cmp	r0, #0
    18a0:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
    18a4:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    18a8:	03a00000 	moveq	r0, #0
    18ac:	012fff1e 	bxeq	lr
    18b0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    18b4:	e59f21c8 	ldr	r2, [pc, #456]	; 1a84 <audio_read_rarc_ASM+0x14>
    18b8:	e5922000 	ldr	r2, [r2]
    18bc:	e5802000 	str	r2, [r0]
    18c0:	e3a00001 	mov	r0, #1
    18c4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    18c8:	e12fff1e 	bx	lr

000018cc <audio_write_data_ASM>:
    18cc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    18d0:	e92d0003 	push	{r0, r1}
    18d4:	eb000056 	bl	1a34 <audio_read_wslc_ASM>
    18d8:	e3500000 	cmp	r0, #0
    18dc:	08bd0003 	popeq	{r0, r1}
    18e0:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    18e4:	03a00000 	moveq	r0, #0
    18e8:	012fff1e 	bxeq	lr
    18ec:	eb000055 	bl	1a48 <audio_read_wsrc_ASM>
    18f0:	e3500000 	cmp	r0, #0
    18f4:	08bd0003 	popeq	{r0, r1}
    18f8:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    18fc:	03a00000 	moveq	r0, #0
    1900:	012fff1e 	bxeq	lr
    1904:	e8bd0003 	pop	{r0, r1}
    1908:	e59f2170 	ldr	r2, [pc, #368]	; 1a80 <audio_read_rarc_ASM+0x10>
    190c:	e5820000 	str	r0, [r2]
    1910:	e59f316c 	ldr	r3, [pc, #364]	; 1a84 <audio_read_rarc_ASM+0x14>
    1914:	e5831000 	str	r1, [r3]
    1918:	e3a00001 	mov	r0, #1
    191c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    1920:	e12fff1e 	bx	lr

00001924 <audio_write_leftdata_ASM>:
    1924:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1928:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    192c:	eb000040 	bl	1a34 <audio_read_wslc_ASM>
    1930:	e3500000 	cmp	r0, #0
    1934:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
    1938:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    193c:	03a00000 	moveq	r0, #0
    1940:	012fff1e 	bxeq	lr
    1944:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    1948:	e59f2130 	ldr	r2, [pc, #304]	; 1a80 <audio_read_rarc_ASM+0x10>
    194c:	e5820000 	str	r0, [r2]
    1950:	e3a00001 	mov	r0, #1
    1954:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    1958:	e12fff1e 	bx	lr

0000195c <audio_write_rightdata_ASM>:
    195c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1960:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    1964:	eb000037 	bl	1a48 <audio_read_wsrc_ASM>
    1968:	e3500000 	cmp	r0, #0
    196c:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
    1970:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    1974:	03a00000 	moveq	r0, #0
    1978:	012fff1e 	bxeq	lr
    197c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    1980:	e59f20fc 	ldr	r2, [pc, #252]	; 1a84 <audio_read_rarc_ASM+0x14>
    1984:	e5820000 	str	r0, [r2]
    1988:	e3a00001 	mov	r0, #1
    198c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    1990:	e12fff1e 	bx	lr

00001994 <audio_enable_read_fifo_clear_ASM>:
    1994:	e59f00ec 	ldr	r0, [pc, #236]	; 1a88 <audio_read_rarc_ASM+0x18>
    1998:	e5901000 	ldr	r1, [r0]
    199c:	e3811004 	orr	r1, r1, #4
    19a0:	e5801000 	str	r1, [r0]
    19a4:	e12fff1e 	bx	lr

000019a8 <audio_enable_write_fifo_clear_ASM>:
    19a8:	e59f00d8 	ldr	r0, [pc, #216]	; 1a88 <audio_read_rarc_ASM+0x18>
    19ac:	e5901000 	ldr	r1, [r0]
    19b0:	e3811008 	orr	r1, r1, #8
    19b4:	e5801000 	str	r1, [r0]
    19b8:	e12fff1e 	bx	lr

000019bc <audio_disable_read_fifo_clear_ASM>:
    19bc:	e59f00c4 	ldr	r0, [pc, #196]	; 1a88 <audio_read_rarc_ASM+0x18>
    19c0:	e5901000 	ldr	r1, [r0]
    19c4:	e3c11004 	bic	r1, r1, #4
    19c8:	e5801000 	str	r1, [r0]
    19cc:	e12fff1e 	bx	lr

000019d0 <audio_disable_write_fifo_clear_ASM>:
    19d0:	e59f00b0 	ldr	r0, [pc, #176]	; 1a88 <audio_read_rarc_ASM+0x18>
    19d4:	e5901000 	ldr	r1, [r0]
    19d8:	e3c11008 	bic	r1, r1, #8
    19dc:	e5801000 	str	r1, [r0]
    19e0:	e12fff1e 	bx	lr

000019e4 <audio_enable_read_int_ASM>:
    19e4:	e59f009c 	ldr	r0, [pc, #156]	; 1a88 <audio_read_rarc_ASM+0x18>
    19e8:	e5901000 	ldr	r1, [r0]
    19ec:	e3811001 	orr	r1, r1, #1
    19f0:	e5801000 	str	r1, [r0]
    19f4:	e12fff1e 	bx	lr

000019f8 <audio_enable_write_int_ASM>:
    19f8:	e59f0088 	ldr	r0, [pc, #136]	; 1a88 <audio_read_rarc_ASM+0x18>
    19fc:	e5901000 	ldr	r1, [r0]
    1a00:	e3811002 	orr	r1, r1, #2
    1a04:	e5801000 	str	r1, [r0]
    1a08:	e12fff1e 	bx	lr

00001a0c <audio_disable_read_int_ASM>:
    1a0c:	e59f0074 	ldr	r0, [pc, #116]	; 1a88 <audio_read_rarc_ASM+0x18>
    1a10:	e5901000 	ldr	r1, [r0]
    1a14:	e3c11001 	bic	r1, r1, #1
    1a18:	e5801000 	str	r1, [r0]
    1a1c:	e12fff1e 	bx	lr

00001a20 <audio_disable_write_int_ASM>:
    1a20:	e59f0060 	ldr	r0, [pc, #96]	; 1a88 <audio_read_rarc_ASM+0x18>
    1a24:	e5901000 	ldr	r1, [r0]
    1a28:	e3c11002 	bic	r1, r1, #2
    1a2c:	e5801000 	str	r1, [r0]
    1a30:	e12fff1e 	bx	lr

00001a34 <audio_read_wslc_ASM>:
    1a34:	e59f0050 	ldr	r0, [pc, #80]	; 1a8c <audio_read_rarc_ASM+0x1c>
    1a38:	e5900000 	ldr	r0, [r0]
    1a3c:	e1a00c20 	lsr	r0, r0, #24
    1a40:	e20000ff 	and	r0, r0, #255	; 0xff
    1a44:	e12fff1e 	bx	lr

00001a48 <audio_read_wsrc_ASM>:
    1a48:	e59f003c 	ldr	r0, [pc, #60]	; 1a8c <audio_read_rarc_ASM+0x1c>
    1a4c:	e5900000 	ldr	r0, [r0]
    1a50:	e1a00820 	lsr	r0, r0, #16
    1a54:	e20000ff 	and	r0, r0, #255	; 0xff
    1a58:	e12fff1e 	bx	lr

00001a5c <audio_read_ralc_ASM>:
    1a5c:	e59f0028 	ldr	r0, [pc, #40]	; 1a8c <audio_read_rarc_ASM+0x1c>
    1a60:	e5900000 	ldr	r0, [r0]
    1a64:	e1a00420 	lsr	r0, r0, #8
    1a68:	e20000ff 	and	r0, r0, #255	; 0xff
    1a6c:	e12fff1e 	bx	lr

00001a70 <audio_read_rarc_ASM>:
    1a70:	e59f0014 	ldr	r0, [pc, #20]	; 1a8c <audio_read_rarc_ASM+0x1c>
    1a74:	e5900000 	ldr	r0, [r0]
    1a78:	e20000ff 	and	r0, r0, #255	; 0xff
    1a7c:	e12fff1e 	bx	lr
    1a80:	ff203048 	.word	0xff203048
    1a84:	ff20304c 	.word	0xff20304c
    1a88:	ff203040 	.word	0xff203040
    1a8c:	ff203044 	.word	0xff203044

00001a90 <read_ps2_data_ASM>:
    1a90:	e59f114c 	ldr	r1, [pc, #332]	; 1be4 <ps2_fifo_ravail+0x4>
    1a94:	e5911000 	ldr	r1, [r1]
    1a98:	e3a02902 	mov	r2, #32768	; 0x8000
    1a9c:	e1110002 	tst	r1, r2
    1aa0:	03a00000 	moveq	r0, #0
    1aa4:	012fff1e 	bxeq	lr
    1aa8:	e20120ff 	and	r2, r1, #255	; 0xff
    1aac:	e5c02000 	strb	r2, [r0]
    1ab0:	e59f2130 	ldr	r2, [pc, #304]	; 1be8 <ps2_fifo_ravail+0x8>
    1ab4:	e0010002 	and	r0, r1, r2
    1ab8:	e1a00820 	lsr	r0, r0, #16
    1abc:	e12fff1e 	bx	lr

00001ac0 <enable_ps2_int_ASM>:
    1ac0:	e59f011c 	ldr	r0, [pc, #284]	; 1be4 <ps2_fifo_ravail+0x4>
    1ac4:	e3a01001 	mov	r1, #1
    1ac8:	e5c01004 	strb	r1, [r0, #4]
    1acc:	e12fff1e 	bx	lr

00001ad0 <disable_ps2_int_ASM>:
    1ad0:	e59f010c 	ldr	r0, [pc, #268]	; 1be4 <ps2_fifo_ravail+0x4>
    1ad4:	e3a01000 	mov	r1, #0
    1ad8:	e5c01004 	strb	r1, [r0, #4]
    1adc:	e12fff1e 	bx	lr

00001ae0 <ps2_fifo_data>:
	...

00001be0 <ps2_fifo_ravail>:
    1be0:	00000000 	.word	0x00000000
    1be4:	ff200100 	.word	0xff200100
    1be8:	ffff0000 	.word	0xffff0000

00001bec <read_PB_data_ASM>:
    1bec:	e59f1074 	ldr	r1, [pc, #116]	; 1c68 <disable_PB_INT_ASM+0x14>
    1bf0:	e5910000 	ldr	r0, [r1]
    1bf4:	e12fff1e 	bx	lr

00001bf8 <PB_data_is_pressed_ASM>:
    1bf8:	e59f1068 	ldr	r1, [pc, #104]	; 1c68 <disable_PB_INT_ASM+0x14>
    1bfc:	e5912000 	ldr	r2, [r1]
    1c00:	e0000002 	and	r0, r0, r2
    1c04:	e3300000 	teq	r0, #0
    1c08:	13a00001 	movne	r0, #1
    1c0c:	e12fff1e 	bx	lr

00001c10 <read_PB_edgecap_ASM>:
    1c10:	e59f1054 	ldr	r1, [pc, #84]	; 1c6c <disable_PB_INT_ASM+0x18>
    1c14:	e5910000 	ldr	r0, [r1]
    1c18:	e12fff1e 	bx	lr

00001c1c <PB_edgecap_is_pressed_ASM>:
    1c1c:	e59f1048 	ldr	r1, [pc, #72]	; 1c6c <disable_PB_INT_ASM+0x18>
    1c20:	e5912000 	ldr	r2, [r1]
    1c24:	e0000002 	and	r0, r0, r2
    1c28:	e3300000 	teq	r0, #0
    1c2c:	13a00001 	movne	r0, #1
    1c30:	e12fff1e 	bx	lr

00001c34 <PB_clear_edgecp_ASM>:
    1c34:	e59f1030 	ldr	r1, [pc, #48]	; 1c6c <disable_PB_INT_ASM+0x18>
    1c38:	e5810000 	str	r0, [r1]
    1c3c:	e12fff1e 	bx	lr

00001c40 <enable_PB_INT_ASM>:
    1c40:	e59f1028 	ldr	r1, [pc, #40]	; 1c70 <disable_PB_INT_ASM+0x1c>
    1c44:	e5912000 	ldr	r2, [r1]
    1c48:	e1800002 	orr	r0, r0, r2
    1c4c:	e5810000 	str	r0, [r1]
    1c50:	e12fff1e 	bx	lr

00001c54 <disable_PB_INT_ASM>:
    1c54:	e59f1014 	ldr	r1, [pc, #20]	; 1c70 <disable_PB_INT_ASM+0x1c>
    1c58:	e5912000 	ldr	r2, [r1]
    1c5c:	e1c00002 	bic	r0, r0, r2
    1c60:	e5810000 	str	r0, [r1]
    1c64:	e12fff1e 	bx	lr
    1c68:	ff200050 	.word	0xff200050
    1c6c:	ff20005c 	.word	0xff20005c
    1c70:	ff200058 	.word	0xff200058

00001c74 <read_slider_switches_ASM>:
    1c74:	e59f1004 	ldr	r1, [pc, #4]	; 1c80 <read_slider_switches_ASM+0xc>
    1c78:	e5910000 	ldr	r0, [r1]
    1c7c:	e12fff1e 	bx	lr
    1c80:	ff200040 	.word	0xff200040

00001c84 <VGA_clear_charbuff_ASM>:
    1c84:	e92d0030 	push	{r4, r5}
    1c88:	e3a02000 	mov	r2, #0
    1c8c:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    1c90:	e3a00000 	mov	r0, #0

00001c94 <CHAR_LOOPX>:
    1c94:	e3a01000 	mov	r1, #0
    1c98:	e0834000 	add	r4, r3, r0

00001c9c <CHAR_LOOPY>:
    1c9c:	e0845381 	add	r5, r4, r1, lsl #7
    1ca0:	e5c52000 	strb	r2, [r5]
    1ca4:	e2811001 	add	r1, r1, #1
    1ca8:	e351003c 	cmp	r1, #60	; 0x3c
    1cac:	bafffffa 	blt	1c9c <CHAR_LOOPY>
    1cb0:	e2800001 	add	r0, r0, #1
    1cb4:	e3500050 	cmp	r0, #80	; 0x50
    1cb8:	bafffff5 	blt	1c94 <CHAR_LOOPX>
    1cbc:	e8bd0030 	pop	{r4, r5}
    1cc0:	e12fff1e 	bx	lr

00001cc4 <VGA_clear_pixelbuff_ASM>:
    1cc4:	e92d0030 	push	{r4, r5}
    1cc8:	e3a02000 	mov	r2, #0
    1ccc:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    1cd0:	e3a00000 	mov	r0, #0

00001cd4 <PIXEL_LOOPX>:
    1cd4:	e3a01000 	mov	r1, #0
    1cd8:	e0834080 	add	r4, r3, r0, lsl #1

00001cdc <PIXEL_LOOPY>:
    1cdc:	e0845501 	add	r5, r4, r1, lsl #10
    1ce0:	e1c520b0 	strh	r2, [r5]
    1ce4:	e2811001 	add	r1, r1, #1
    1ce8:	e35100f0 	cmp	r1, #240	; 0xf0
    1cec:	bafffffa 	blt	1cdc <PIXEL_LOOPY>
    1cf0:	e2800001 	add	r0, r0, #1
    1cf4:	e3500d05 	cmp	r0, #320	; 0x140
    1cf8:	bafffff5 	blt	1cd4 <PIXEL_LOOPX>
    1cfc:	e8bd0030 	pop	{r4, r5}
    1d00:	e12fff1e 	bx	lr

00001d04 <VGA_write_char_ASM>:
    1d04:	e3500000 	cmp	r0, #0
    1d08:	b12fff1e 	bxlt	lr
    1d0c:	e3510000 	cmp	r1, #0
    1d10:	b12fff1e 	bxlt	lr
    1d14:	e350004f 	cmp	r0, #79	; 0x4f
    1d18:	c12fff1e 	bxgt	lr
    1d1c:	e351003b 	cmp	r1, #59	; 0x3b
    1d20:	c12fff1e 	bxgt	lr
    1d24:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    1d28:	e0833000 	add	r3, r3, r0
    1d2c:	e0833381 	add	r3, r3, r1, lsl #7
    1d30:	e5c32000 	strb	r2, [r3]
    1d34:	e12fff1e 	bx	lr

00001d38 <VGA_write_byte_ASM>:
    1d38:	e3500000 	cmp	r0, #0
    1d3c:	b12fff1e 	bxlt	lr
    1d40:	e3510000 	cmp	r1, #0
    1d44:	b12fff1e 	bxlt	lr
    1d48:	e350004e 	cmp	r0, #78	; 0x4e
    1d4c:	c12fff1e 	bxgt	lr
    1d50:	e351003b 	cmp	r1, #59	; 0x3b
    1d54:	c12fff1e 	bxgt	lr
    1d58:	e92d0030 	push	{r4, r5}
    1d5c:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    1d60:	e20250f0 	and	r5, r2, #240	; 0xf0
    1d64:	e1a05225 	lsr	r5, r5, #4
    1d68:	e202400f 	and	r4, r2, #15
    1d6c:	e59f2068 	ldr	r2, [pc, #104]	; 1ddc <HEX_ASCII+0x10>
    1d70:	e7d25005 	ldrb	r5, [r2, r5]
    1d74:	e7d24004 	ldrb	r4, [r2, r4]
    1d78:	e0833000 	add	r3, r3, r0
    1d7c:	e0833381 	add	r3, r3, r1, lsl #7
    1d80:	e5c35000 	strb	r5, [r3]
    1d84:	e2833001 	add	r3, r3, #1
    1d88:	e5c34000 	strb	r4, [r3]
    1d8c:	e8bd0030 	pop	{r4, r5}
    1d90:	e12fff1e 	bx	lr

00001d94 <VGA_draw_point_ASM>:
    1d94:	e59f3044 	ldr	r3, [pc, #68]	; 1de0 <HEX_ASCII+0x14>
    1d98:	e3500000 	cmp	r0, #0
    1d9c:	b12fff1e 	bxlt	lr
    1da0:	e3510000 	cmp	r1, #0
    1da4:	b12fff1e 	bxlt	lr
    1da8:	e1500003 	cmp	r0, r3
    1dac:	c12fff1e 	bxgt	lr
    1db0:	e35100ef 	cmp	r1, #239	; 0xef
    1db4:	c12fff1e 	bxgt	lr
    1db8:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    1dbc:	e0833080 	add	r3, r3, r0, lsl #1
    1dc0:	e0833501 	add	r3, r3, r1, lsl #10
    1dc4:	e1c320b0 	strh	r2, [r3]
    1dc8:	e12fff1e 	bx	lr

00001dcc <HEX_ASCII>:
    1dcc:	33323130 	.word	0x33323130
    1dd0:	37363534 	.word	0x37363534
    1dd4:	42413938 	.word	0x42413938
    1dd8:	46454443 	.word	0x46454443
    1ddc:	00001dcc 	.word	0x00001dcc
    1de0:	0000013f 	.word	0x0000013f

00001de4 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
    1de4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1de8:	e28db000 	add	r11, sp, #0
    1dec:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
    1df0:	e3a030d3 	mov	r3, #211	; 0xd3
    1df4:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    1df8:	e51b3008 	ldr	r3, [r11, #-8]
    1dfc:	e129f003 	msr	CPSR_fc, r3
}
    1e00:	e28bd000 	add	sp, r11, #0
    1e04:	e8bd0800 	ldmfd	sp!, {r11}
    1e08:	e12fff1e 	bx	lr

00001e0c <enable_A9_interrupts>:

void enable_A9_interrupts() {
    1e0c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1e10:	e28db000 	add	r11, sp, #0
    1e14:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
    1e18:	e3a03053 	mov	r3, #83	; 0x53
    1e1c:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    1e20:	e51b3008 	ldr	r3, [r11, #-8]
    1e24:	e129f003 	msr	CPSR_fc, r3
}
    1e28:	e28bd000 	add	sp, r11, #0
    1e2c:	e8bd0800 	ldmfd	sp!, {r11}
    1e30:	e12fff1e 	bx	lr

00001e34 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
    1e34:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1e38:	e28db000 	add	r11, sp, #0
    1e3c:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
    1e40:	e3e03007 	mvn	r3, #7
    1e44:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
    1e48:	e3a030d2 	mov	r3, #210	; 0xd2
    1e4c:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    1e50:	e51b300c 	ldr	r3, [r11, #-12]
    1e54:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
    1e58:	e51b3008 	ldr	r3, [r11, #-8]
    1e5c:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
    1e60:	e3a030d3 	mov	r3, #211	; 0xd3
    1e64:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    1e68:	e51b300c 	ldr	r3, [r11, #-12]
    1e6c:	e129f003 	msr	CPSR_fc, r3
}
    1e70:	e28bd000 	add	sp, r11, #0
    1e74:	e8bd0800 	ldmfd	sp!, {r11}
    1e78:	e12fff1e 	bx	lr

00001e7c <config_interrupt>:

void config_interrupt(int ID, int CPU) {
    1e7c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1e80:	e28db000 	add	r11, sp, #0
    1e84:	e24dd01c 	sub	sp, sp, #28
    1e88:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    1e8c:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
    1e90:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1e94:	e1a031c3 	asr	r3, r3, #3
    1e98:	e3c33003 	bic	r3, r3, #3
    1e9c:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
    1ea0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1ea4:	e203301f 	and	r3, r3, #31
    1ea8:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
    1eac:	e3a02001 	mov	r2, #1
    1eb0:	e51b300c 	ldr	r3, [r11, #-12]
    1eb4:	e1a03312 	lsl	r3, r2, r3
    1eb8:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
    1ebc:	e51b3008 	ldr	r3, [r11, #-8]
    1ec0:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
    1ec4:	e2433c03 	sub	r3, r3, #768	; 0x300
    1ec8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
    1ecc:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1ed0:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    1ed4:	e5921000 	ldr	r1, [r2]
    1ed8:	e51b2010 	ldr	r2, [r11, #-16]
    1edc:	e1812002 	orr	r2, r1, r2
    1ee0:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
    1ee4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1ee8:	e3c33003 	bic	r3, r3, #3
    1eec:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
    1ef0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1ef4:	e2033003 	and	r3, r3, #3
    1ef8:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
    1efc:	e51b2008 	ldr	r2, [r11, #-8]
    1f00:	e51b300c 	ldr	r3, [r11, #-12]
    1f04:	e0823003 	add	r3, r2, r3
    1f08:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
    1f0c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
    1f10:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1f14:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    1f18:	e6ef2072 	uxtb	r2, r2
    1f1c:	e5c32000 	strb	r2, [r3]
}
    1f20:	e28bd000 	add	sp, r11, #0
    1f24:	e8bd0800 	ldmfd	sp!, {r11}
    1f28:	e12fff1e 	bx	lr

00001f2c <config_GIC>:

void config_GIC(int len, int* IDs) {
    1f2c:	e92d4800 	push	{r11, lr}
    1f30:	e28db004 	add	r11, sp, #4
    1f34:	e24dd010 	sub	sp, sp, #16
    1f38:	e50b0010 	str	r0, [r11, #-16]
    1f3c:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
    1f40:	e3a03000 	mov	r3, #0
    1f44:	e50b3008 	str	r3, [r11, #-8]
    1f48:	ea00000a 	b	1f78 <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
    1f4c:	e51b3008 	ldr	r3, [r11, #-8]
    1f50:	e1a03103 	lsl	r3, r3, #2
    1f54:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    1f58:	e0823003 	add	r3, r2, r3
    1f5c:	e5933000 	ldr	r3, [r3]
    1f60:	e1a00003 	mov	r0, r3
    1f64:	e3a01001 	mov	r1, #1
    1f68:	ebffffc3 	bl	1e7c <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
    1f6c:	e51b3008 	ldr	r3, [r11, #-8]
    1f70:	e2833001 	add	r3, r3, #1
    1f74:	e50b3008 	str	r3, [r11, #-8]
    1f78:	e51b2008 	ldr	r2, [r11, #-8]
    1f7c:	e51b3010 	ldr	r3, [r11, #-16]
    1f80:	e1520003 	cmp	r2, r3
    1f84:	bafffff0 	blt	1f4c <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
    1f88:	e30c3104 	movw	r3, #49412	; 0xc104
    1f8c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1f90:	e30f2fff 	movw	r2, #65535	; 0xffff
    1f94:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
    1f98:	e3a03cc1 	mov	r3, #49408	; 0xc100
    1f9c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1fa0:	e3a02001 	mov	r2, #1
    1fa4:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
    1fa8:	e3a03a0d 	mov	r3, #53248	; 0xd000
    1fac:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1fb0:	e3a02001 	mov	r2, #1
    1fb4:	e5832000 	str	r2, [r3]
}
    1fb8:	e24bd004 	sub	sp, r11, #4
    1fbc:	e8bd8800 	pop	{r11, pc}

00001fc0 <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
    1fc0:	e24ee004 	sub	lr, lr, #4
    1fc4:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
    1fc8:	e28db018 	add	r11, sp, #24
    1fcc:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
    1fd0:	e30c310c 	movw	r3, #49420	; 0xc10c
    1fd4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1fd8:	e5933000 	ldr	r3, [r3]
    1fdc:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
    1fe0:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1fe4:	e3530053 	cmp	r3, #83	; 0x53
    1fe8:	0a00003d 	beq	20e4 <__cs3_isr_irq+0x124>
    1fec:	e3530053 	cmp	r3, #83	; 0x53
    1ff0:	ca000011 	bgt	203c <__cs3_isr_irq+0x7c>
    1ff4:	e353004e 	cmp	r3, #78	; 0x4e
    1ff8:	0a000031 	beq	20c4 <__cs3_isr_irq+0x104>
    1ffc:	e353004e 	cmp	r3, #78	; 0x4e
    2000:	ca000006 	bgt	2020 <__cs3_isr_irq+0x60>
    2004:	e3530048 	cmp	r3, #72	; 0x48
    2008:	0a000029 	beq	20b4 <__cs3_isr_irq+0xf4>
    200c:	e3530049 	cmp	r3, #73	; 0x49
    2010:	0a000029 	beq	20bc <__cs3_isr_irq+0xfc>
    2014:	e353001d 	cmp	r3, #29
    2018:	0a000019 	beq	2084 <__cs3_isr_irq+0xc4>
    201c:	ea000036 	b	20fc <__cs3_isr_irq+0x13c>
    2020:	e3530050 	cmp	r3, #80	; 0x50
    2024:	0a00002a 	beq	20d4 <__cs3_isr_irq+0x114>
    2028:	e3530050 	cmp	r3, #80	; 0x50
    202c:	ba000026 	blt	20cc <__cs3_isr_irq+0x10c>
    2030:	e3530051 	cmp	r3, #81	; 0x51
    2034:	0a000028 	beq	20dc <__cs3_isr_irq+0x11c>
    2038:	ea00002f 	b	20fc <__cs3_isr_irq+0x13c>
    203c:	e35300c7 	cmp	r3, #199	; 0xc7
    2040:	0a000013 	beq	2094 <__cs3_isr_irq+0xd4>
    2044:	e35300c7 	cmp	r3, #199	; 0xc7
    2048:	ca000006 	bgt	2068 <__cs3_isr_irq+0xa8>
    204c:	e3530059 	cmp	r3, #89	; 0x59
    2050:	0a000027 	beq	20f4 <__cs3_isr_irq+0x134>
    2054:	e35300c5 	cmp	r3, #197	; 0xc5
    2058:	0a00000b 	beq	208c <__cs3_isr_irq+0xcc>
    205c:	e3530054 	cmp	r3, #84	; 0x54
    2060:	0a000021 	beq	20ec <__cs3_isr_irq+0x12c>
    2064:	ea000024 	b	20fc <__cs3_isr_irq+0x13c>
    2068:	e35300c9 	cmp	r3, #201	; 0xc9
    206c:	0a00000c 	beq	20a4 <__cs3_isr_irq+0xe4>
    2070:	e35300c9 	cmp	r3, #201	; 0xc9
    2074:	ba000008 	blt	209c <__cs3_isr_irq+0xdc>
    2078:	e35300ca 	cmp	r3, #202	; 0xca
    207c:	0a00000a 	beq	20ac <__cs3_isr_irq+0xec>
    2080:	ea00001d 	b	20fc <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
    2084:	ebfffdc7 	bl	17a8 <A9_PRIV_TIM_ISR>
    2088:	ea00001c 	b	2100 <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
    208c:	ebfffdc6 	bl	17ac <HPS_GPIO1_ISR>
    2090:	ea00001a 	b	2100 <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
    2094:	ebfffdc5 	bl	17b0 <HPS_TIM0_ISR>
    2098:	ea000018 	b	2100 <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
    209c:	ebfffdc4 	bl	17b4 <HPS_TIM1_ISR>
    20a0:	ea000016 	b	2100 <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
    20a4:	ebfffdc3 	bl	17b8 <HPS_TIM2_ISR>
    20a8:	ea000014 	b	2100 <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
    20ac:	ebfffdc2 	bl	17bc <HPS_TIM3_ISR>
    20b0:	ea000012 	b	2100 <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
    20b4:	ebfffdc1 	bl	17c0 <FPGA_INTERVAL_TIM_ISR>
    20b8:	ea000010 	b	2100 <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
    20bc:	ebfffdc0 	bl	17c4 <FPGA_PB_KEYS_ISR>
    20c0:	ea00000e 	b	2100 <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
    20c4:	ebfffdbf 	bl	17c8 <FPGA_Audio_ISR>
    20c8:	ea00000c 	b	2100 <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
    20cc:	ebfffdbe 	bl	17cc <FPGA_PS2_ISR>
    20d0:	ea00000a 	b	2100 <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
    20d4:	ebfffdbd 	bl	17d0 <FPGA_JTAG_ISR>
    20d8:	ea000008 	b	2100 <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
    20dc:	ebfffdbc 	bl	17d4 <FPGA_IrDA_ISR>
    20e0:	ea000006 	b	2100 <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
    20e4:	ebfffdbb 	bl	17d8 <FPGA_JP1_ISR>
    20e8:	ea000004 	b	2100 <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
    20ec:	ebfffdba 	bl	17dc <FPGA_JP2_ISR>
    20f0:	ea000002 	b	2100 <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
    20f4:	ebfffdb9 	bl	17e0 <FPGA_PS2_DUAL_ISR>
    20f8:	ea000000 	b	2100 <__cs3_isr_irq+0x140>
	
		default: while(1); break;
    20fc:	eafffffe 	b	20fc <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
    2100:	e30c3110 	movw	r3, #49424	; 0xc110
    2104:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    2108:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    210c:	e5832000 	str	r2, [r3]
}
    2110:	e24bd018 	sub	sp, r11, #24
    2114:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00002118 <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
    2118:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    211c:	e28db000 	add	r11, sp, #0
	while(1);
    2120:	eafffffe 	b	2120 <__cs3_reset+0x8>

00002124 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
    2124:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2128:	e28db000 	add	r11, sp, #0
	while(1);
    212c:	eafffffe 	b	212c <__cs3_isr_undef+0x8>

00002130 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
    2130:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2134:	e28db000 	add	r11, sp, #0
	while(1);
    2138:	eafffffe 	b	2138 <__cs3_isr_swi+0x8>

0000213c <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
    213c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2140:	e28db000 	add	r11, sp, #0
	while(1);
    2144:	eafffffe 	b	2144 <__cs3_isr_pabort+0x8>

00002148 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
    2148:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    214c:	e28db000 	add	r11, sp, #0
	while(1);
    2150:	eafffffe 	b	2150 <__cs3_isr_dabort+0x8>

00002154 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
    2154:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2158:	e28db000 	add	r11, sp, #0
	while(1);
    215c:	eafffffe 	b	215c <__cs3_isr_fiq+0x8>

00002160 <fix_bug>:
}

void fix_bug() {
    2160:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2164:	e28db000 	add	r11, sp, #0
    2168:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
    216c:	e30d3198 	movw	r3, #53656	; 0xd198
    2170:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    2174:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
    2178:	e51b3008 	ldr	r3, [r11, #-8]
    217c:	e3a02703 	mov	r2, #786432	; 0xc0000
    2180:	e5832000 	str	r2, [r3]
}
    2184:	e28bd000 	add	sp, r11, #0
    2188:	e8bd0800 	ldmfd	sp!, {r11}
    218c:	e12fff1e 	bx	lr

00002190 <int_setup>:

void int_setup(int len, int* IDs) {
    2190:	e92d4800 	push	{r11, lr}
    2194:	e28db004 	add	r11, sp, #4
    2198:	e24dd008 	sub	sp, sp, #8
    219c:	e50b0008 	str	r0, [r11, #-8]
    21a0:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
    21a4:	ebffff0e 	bl	1de4 <disable_A9_interrupts>
	set_A9_IRQ_stack();
    21a8:	ebffff21 	bl	1e34 <set_A9_IRQ_stack>
	fix_bug();
    21ac:	ebffffeb 	bl	2160 <fix_bug>
	config_GIC(len, IDs);
    21b0:	e51b0008 	ldr	r0, [r11, #-8]
    21b4:	e51b100c 	ldr	r1, [r11, #-12]
    21b8:	ebffff5b 	bl	1f2c <config_GIC>
	enable_A9_interrupts();
    21bc:	ebffff12 	bl	1e0c <enable_A9_interrupts>
}
    21c0:	e24bd004 	sub	sp, r11, #4
    21c4:	e8bd8800 	pop	{r11, pc}

000021c8 <__aeabi_drsub>:
    21c8:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    21cc:	ea000000 	b	21d4 <__adddf3>

000021d0 <__aeabi_dsub>:
    21d0:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

000021d4 <__adddf3>:
    21d4:	e92d4030 	push	{r4, r5, lr}
    21d8:	e1a04081 	lsl	r4, r1, #1
    21dc:	e1a05083 	lsl	r5, r3, #1
    21e0:	e1340005 	teq	r4, r5
    21e4:	01300002 	teqeq	r0, r2
    21e8:	1194c000 	orrsne	r12, r4, r0
    21ec:	1195c002 	orrsne	r12, r5, r2
    21f0:	11f0cac4 	mvnsne	r12, r4, asr #21
    21f4:	11f0cac5 	mvnsne	r12, r5, asr #21
    21f8:	0a00008c 	beq	2430 <__adddf3+0x25c>
    21fc:	e1a04aa4 	lsr	r4, r4, #21
    2200:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    2204:	b2655000 	rsblt	r5, r5, #0
    2208:	da000006 	ble	2228 <__adddf3+0x54>
    220c:	e0844005 	add	r4, r4, r5
    2210:	e0202002 	eor	r2, r0, r2
    2214:	e0213003 	eor	r3, r1, r3
    2218:	e0220000 	eor	r0, r2, r0
    221c:	e0231001 	eor	r1, r3, r1
    2220:	e0202002 	eor	r2, r0, r2
    2224:	e0213003 	eor	r3, r1, r3
    2228:	e3550036 	cmp	r5, #54	; 0x36
    222c:	88bd4030 	pophi	{r4, r5, lr}
    2230:	812fff1e 	bxhi	lr
    2234:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    2238:	e1a01601 	lsl	r1, r1, #12
    223c:	e3a0c601 	mov	r12, #1048576	; 0x100000
    2240:	e18c1621 	orr	r1, r12, r1, lsr #12
    2244:	0a000001 	beq	2250 <__adddf3+0x7c>
    2248:	e2700000 	rsbs	r0, r0, #0
    224c:	e2e11000 	rsc	r1, r1, #0
    2250:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    2254:	e1a03603 	lsl	r3, r3, #12
    2258:	e18c3623 	orr	r3, r12, r3, lsr #12
    225c:	0a000001 	beq	2268 <__adddf3+0x94>
    2260:	e2722000 	rsbs	r2, r2, #0
    2264:	e2e33000 	rsc	r3, r3, #0
    2268:	e1340005 	teq	r4, r5
    226c:	0a000069 	beq	2418 <__adddf3+0x244>
    2270:	e2444001 	sub	r4, r4, #1
    2274:	e275e020 	rsbs	lr, r5, #32
    2278:	ba000005 	blt	2294 <__adddf3+0xc0>
    227c:	e1a0ce12 	lsl	r12, r2, lr
    2280:	e0900532 	adds	r0, r0, r2, lsr r5
    2284:	e2a11000 	adc	r1, r1, #0
    2288:	e0900e13 	adds	r0, r0, r3, lsl lr
    228c:	e0b11553 	adcs	r1, r1, r3, asr r5
    2290:	ea000006 	b	22b0 <__adddf3+0xdc>
    2294:	e2455020 	sub	r5, r5, #32
    2298:	e28ee020 	add	lr, lr, #32
    229c:	e3520001 	cmp	r2, #1
    22a0:	e1a0ce13 	lsl	r12, r3, lr
    22a4:	238cc002 	orrcs	r12, r12, #2
    22a8:	e0900553 	adds	r0, r0, r3, asr r5
    22ac:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    22b0:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    22b4:	5a000002 	bpl	22c4 <__adddf3+0xf0>
    22b8:	e27cc000 	rsbs	r12, r12, #0
    22bc:	e2f00000 	rscs	r0, r0, #0
    22c0:	e2e11000 	rsc	r1, r1, #0
    22c4:	e3510601 	cmp	r1, #1048576	; 0x100000
    22c8:	3a00000f 	bcc	230c <__adddf3+0x138>
    22cc:	e3510602 	cmp	r1, #2097152	; 0x200000
    22d0:	3a000006 	bcc	22f0 <__adddf3+0x11c>
    22d4:	e1b010a1 	lsrs	r1, r1, #1
    22d8:	e1b00060 	rrxs	r0, r0
    22dc:	e1a0c06c 	rrx	r12, r12
    22e0:	e2844001 	add	r4, r4, #1
    22e4:	e1a02a84 	lsl	r2, r4, #21
    22e8:	e3720501 	cmn	r2, #4194304	; 0x400000
    22ec:	2a00006b 	bcs	24a0 <__adddf3+0x2cc>
    22f0:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    22f4:	01b0c0a0 	lsrseq	r12, r0, #1
    22f8:	e2b00000 	adcs	r0, r0, #0
    22fc:	e0a11a04 	adc	r1, r1, r4, lsl #20
    2300:	e1811005 	orr	r1, r1, r5
    2304:	e8bd4030 	pop	{r4, r5, lr}
    2308:	e12fff1e 	bx	lr
    230c:	e1b0c08c 	lsls	r12, r12, #1
    2310:	e0b00000 	adcs	r0, r0, r0
    2314:	e0a11001 	adc	r1, r1, r1
    2318:	e3110601 	tst	r1, #1048576	; 0x100000
    231c:	e2444001 	sub	r4, r4, #1
    2320:	1afffff2 	bne	22f0 <__adddf3+0x11c>
    2324:	e3310000 	teq	r1, #0
    2328:	13a03014 	movne	r3, #20
    232c:	03a03034 	moveq	r3, #52	; 0x34
    2330:	01a01000 	moveq	r1, r0
    2334:	03a00000 	moveq	r0, #0
    2338:	e1a02001 	mov	r2, r1
    233c:	e3520801 	cmp	r2, #65536	; 0x10000
    2340:	21a02822 	lsrcs	r2, r2, #16
    2344:	22433010 	subcs	r3, r3, #16
    2348:	e3520c01 	cmp	r2, #256	; 0x100
    234c:	21a02422 	lsrcs	r2, r2, #8
    2350:	22433008 	subcs	r3, r3, #8
    2354:	e3520010 	cmp	r2, #16
    2358:	21a02222 	lsrcs	r2, r2, #4
    235c:	22433004 	subcs	r3, r3, #4
    2360:	e3520004 	cmp	r2, #4
    2364:	22433002 	subcs	r3, r3, #2
    2368:	304330a2 	subcc	r3, r3, r2, lsr #1
    236c:	e04331a2 	sub	r3, r3, r2, lsr #3
    2370:	e2532020 	subs	r2, r3, #32
    2374:	aa000007 	bge	2398 <__adddf3+0x1c4>
    2378:	e292200c 	adds	r2, r2, #12
    237c:	da000004 	ble	2394 <__adddf3+0x1c0>
    2380:	e282c014 	add	r12, r2, #20
    2384:	e262200c 	rsb	r2, r2, #12
    2388:	e1a00c11 	lsl	r0, r1, r12
    238c:	e1a01231 	lsr	r1, r1, r2
    2390:	ea000004 	b	23a8 <__adddf3+0x1d4>
    2394:	e2822014 	add	r2, r2, #20
    2398:	d262c020 	rsble	r12, r2, #32
    239c:	e1a01211 	lsl	r1, r1, r2
    23a0:	d1811c30 	orrle	r1, r1, r0, lsr r12
    23a4:	d1a00210 	lslle	r0, r0, r2
    23a8:	e0544003 	subs	r4, r4, r3
    23ac:	a0811a04 	addge	r1, r1, r4, lsl #20
    23b0:	a1811005 	orrge	r1, r1, r5
    23b4:	a8bd4030 	popge	{r4, r5, lr}
    23b8:	a12fff1e 	bxge	lr
    23bc:	e1e04004 	mvn	r4, r4
    23c0:	e254401f 	subs	r4, r4, #31
    23c4:	aa00000f 	bge	2408 <__adddf3+0x234>
    23c8:	e294400c 	adds	r4, r4, #12
    23cc:	ca000006 	bgt	23ec <__adddf3+0x218>
    23d0:	e2844014 	add	r4, r4, #20
    23d4:	e2642020 	rsb	r2, r4, #32
    23d8:	e1a00430 	lsr	r0, r0, r4
    23dc:	e1800211 	orr	r0, r0, r1, lsl r2
    23e0:	e1851431 	orr	r1, r5, r1, lsr r4
    23e4:	e8bd4030 	pop	{r4, r5, lr}
    23e8:	e12fff1e 	bx	lr
    23ec:	e264400c 	rsb	r4, r4, #12
    23f0:	e2642020 	rsb	r2, r4, #32
    23f4:	e1a00230 	lsr	r0, r0, r2
    23f8:	e1800411 	orr	r0, r0, r1, lsl r4
    23fc:	e1a01005 	mov	r1, r5
    2400:	e8bd4030 	pop	{r4, r5, lr}
    2404:	e12fff1e 	bx	lr
    2408:	e1a00431 	lsr	r0, r1, r4
    240c:	e1a01005 	mov	r1, r5
    2410:	e8bd4030 	pop	{r4, r5, lr}
    2414:	e12fff1e 	bx	lr
    2418:	e3340000 	teq	r4, #0
    241c:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    2420:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    2424:	02844001 	addeq	r4, r4, #1
    2428:	12455001 	subne	r5, r5, #1
    242c:	eaffff8f 	b	2270 <__adddf3+0x9c>
    2430:	e1f0cac4 	mvns	r12, r4, asr #21
    2434:	11f0cac5 	mvnsne	r12, r5, asr #21
    2438:	0a00001d 	beq	24b4 <__adddf3+0x2e0>
    243c:	e1340005 	teq	r4, r5
    2440:	01300002 	teqeq	r0, r2
    2444:	0a000004 	beq	245c <__adddf3+0x288>
    2448:	e194c000 	orrs	r12, r4, r0
    244c:	01a01003 	moveq	r1, r3
    2450:	01a00002 	moveq	r0, r2
    2454:	e8bd4030 	pop	{r4, r5, lr}
    2458:	e12fff1e 	bx	lr
    245c:	e1310003 	teq	r1, r3
    2460:	13a01000 	movne	r1, #0
    2464:	13a00000 	movne	r0, #0
    2468:	18bd4030 	popne	{r4, r5, lr}
    246c:	112fff1e 	bxne	lr
    2470:	e1b0caa4 	lsrs	r12, r4, #21
    2474:	1a000004 	bne	248c <__adddf3+0x2b8>
    2478:	e1b00080 	lsls	r0, r0, #1
    247c:	e0b11001 	adcs	r1, r1, r1
    2480:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    2484:	e8bd4030 	pop	{r4, r5, lr}
    2488:	e12fff1e 	bx	lr
    248c:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    2490:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    2494:	38bd4030 	popcc	{r4, r5, lr}
    2498:	312fff1e 	bxcc	lr
    249c:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    24a0:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    24a4:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    24a8:	e3a00000 	mov	r0, #0
    24ac:	e8bd4030 	pop	{r4, r5, lr}
    24b0:	e12fff1e 	bx	lr
    24b4:	e1f0cac4 	mvns	r12, r4, asr #21
    24b8:	11a01003 	movne	r1, r3
    24bc:	11a00002 	movne	r0, r2
    24c0:	01f0cac5 	mvnseq	r12, r5, asr #21
    24c4:	11a03001 	movne	r3, r1
    24c8:	11a02000 	movne	r2, r0
    24cc:	e1904601 	orrs	r4, r0, r1, lsl #12
    24d0:	01925603 	orrseq	r5, r2, r3, lsl #12
    24d4:	01310003 	teqeq	r1, r3
    24d8:	13811702 	orrne	r1, r1, #524288	; 0x80000
    24dc:	e8bd4030 	pop	{r4, r5, lr}
    24e0:	e12fff1e 	bx	lr

000024e4 <__aeabi_ui2d>:
    24e4:	e3300000 	teq	r0, #0
    24e8:	03a01000 	moveq	r1, #0
    24ec:	012fff1e 	bxeq	lr
    24f0:	e92d4030 	push	{r4, r5, lr}
    24f4:	e3a04b01 	mov	r4, #1024	; 0x400
    24f8:	e2844032 	add	r4, r4, #50	; 0x32
    24fc:	e3a05000 	mov	r5, #0
    2500:	e3a01000 	mov	r1, #0
    2504:	eaffff86 	b	2324 <__adddf3+0x150>

00002508 <__aeabi_i2d>:
    2508:	e3300000 	teq	r0, #0
    250c:	03a01000 	moveq	r1, #0
    2510:	012fff1e 	bxeq	lr
    2514:	e92d4030 	push	{r4, r5, lr}
    2518:	e3a04b01 	mov	r4, #1024	; 0x400
    251c:	e2844032 	add	r4, r4, #50	; 0x32
    2520:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    2524:	42600000 	rsbmi	r0, r0, #0
    2528:	e3a01000 	mov	r1, #0
    252c:	eaffff7c 	b	2324 <__adddf3+0x150>

00002530 <__aeabi_f2d>:
    2530:	e1b02080 	lsls	r2, r0, #1
    2534:	e1a011c2 	asr	r1, r2, #3
    2538:	e1a01061 	rrx	r1, r1
    253c:	e1a00e02 	lsl	r0, r2, #28
    2540:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    2544:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    2548:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    254c:	112fff1e 	bxne	lr
    2550:	e3320000 	teq	r2, #0
    2554:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    2558:	012fff1e 	bxeq	lr
    255c:	e92d4030 	push	{r4, r5, lr}
    2560:	e3a04d0e 	mov	r4, #896	; 0x380
    2564:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    2568:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    256c:	eaffff6c 	b	2324 <__adddf3+0x150>

00002570 <__aeabi_ul2d>:
    2570:	e1902001 	orrs	r2, r0, r1
    2574:	012fff1e 	bxeq	lr
    2578:	e92d4030 	push	{r4, r5, lr}
    257c:	e3a05000 	mov	r5, #0
    2580:	ea000006 	b	25a0 <__aeabi_l2d+0x1c>

00002584 <__aeabi_l2d>:
    2584:	e1902001 	orrs	r2, r0, r1
    2588:	012fff1e 	bxeq	lr
    258c:	e92d4030 	push	{r4, r5, lr}
    2590:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    2594:	5a000001 	bpl	25a0 <__aeabi_l2d+0x1c>
    2598:	e2700000 	rsbs	r0, r0, #0
    259c:	e2e11000 	rsc	r1, r1, #0
    25a0:	e3a04b01 	mov	r4, #1024	; 0x400
    25a4:	e2844032 	add	r4, r4, #50	; 0x32
    25a8:	e1b0cb21 	lsrs	r12, r1, #22
    25ac:	0affff44 	beq	22c4 <__adddf3+0xf0>
    25b0:	e3a02003 	mov	r2, #3
    25b4:	e1b0c1ac 	lsrs	r12, r12, #3
    25b8:	12822003 	addne	r2, r2, #3
    25bc:	e1b0c1ac 	lsrs	r12, r12, #3
    25c0:	12822003 	addne	r2, r2, #3
    25c4:	e08221ac 	add	r2, r2, r12, lsr #3
    25c8:	e2623020 	rsb	r3, r2, #32
    25cc:	e1a0c310 	lsl	r12, r0, r3
    25d0:	e1a00230 	lsr	r0, r0, r2
    25d4:	e1800311 	orr	r0, r0, r1, lsl r3
    25d8:	e1a01231 	lsr	r1, r1, r2
    25dc:	e0844002 	add	r4, r4, r2
    25e0:	eaffff37 	b	22c4 <__adddf3+0xf0>

000025e4 <__aeabi_dmul>:
    25e4:	e92d4070 	push	{r4, r5, r6, lr}
    25e8:	e3a0c0ff 	mov	r12, #255	; 0xff
    25ec:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    25f0:	e01c4a21 	ands	r4, r12, r1, lsr #20
    25f4:	101c5a23 	andsne	r5, r12, r3, lsr #20
    25f8:	1134000c 	teqne	r4, r12
    25fc:	1135000c 	teqne	r5, r12
    2600:	0b000075 	bleq	27dc <__aeabi_dmul+0x1f8>
    2604:	e0844005 	add	r4, r4, r5
    2608:	e0216003 	eor	r6, r1, r3
    260c:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    2610:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    2614:	e1905601 	orrs	r5, r0, r1, lsl #12
    2618:	11925603 	orrsne	r5, r2, r3, lsl #12
    261c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    2620:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    2624:	0a00001d 	beq	26a0 <__aeabi_dmul+0xbc>
    2628:	e08ec290 	umull	r12, lr, r0, r2
    262c:	e3a05000 	mov	r5, #0
    2630:	e0a5e291 	umlal	lr, r5, r1, r2
    2634:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    2638:	e0a5e390 	umlal	lr, r5, r0, r3
    263c:	e3a06000 	mov	r6, #0
    2640:	e0a65391 	umlal	r5, r6, r1, r3
    2644:	e33c0000 	teq	r12, #0
    2648:	138ee001 	orrne	lr, lr, #1
    264c:	e24440ff 	sub	r4, r4, #255	; 0xff
    2650:	e3560c02 	cmp	r6, #512	; 0x200
    2654:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    2658:	2a000002 	bcs	2668 <__aeabi_dmul+0x84>
    265c:	e1b0e08e 	lsls	lr, lr, #1
    2660:	e0b55005 	adcs	r5, r5, r5
    2664:	e0a66006 	adc	r6, r6, r6
    2668:	e1821586 	orr	r1, r2, r6, lsl #11
    266c:	e1811aa5 	orr	r1, r1, r5, lsr #21
    2670:	e1a00585 	lsl	r0, r5, #11
    2674:	e1800aae 	orr	r0, r0, lr, lsr #21
    2678:	e1a0e58e 	lsl	lr, lr, #11
    267c:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    2680:	835c0c07 	cmphi	r12, #1792	; 0x700
    2684:	8a000011 	bhi	26d0 <__aeabi_dmul+0xec>
    2688:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    268c:	01b0e0a0 	lsrseq	lr, r0, #1
    2690:	e2b00000 	adcs	r0, r0, #0
    2694:	e0a11a04 	adc	r1, r1, r4, lsl #20
    2698:	e8bd4070 	pop	{r4, r5, r6, lr}
    269c:	e12fff1e 	bx	lr
    26a0:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    26a4:	e1861001 	orr	r1, r6, r1
    26a8:	e1800002 	orr	r0, r0, r2
    26ac:	e0211003 	eor	r1, r1, r3
    26b0:	e05440ac 	subs	r4, r4, r12, lsr #1
    26b4:	c074500c 	rsbsgt	r5, r4, r12
    26b8:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    26bc:	c8bd4070 	popgt	{r4, r5, r6, lr}
    26c0:	c12fff1e 	bxgt	lr
    26c4:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    26c8:	e3a0e000 	mov	lr, #0
    26cc:	e2544001 	subs	r4, r4, #1
    26d0:	ca00005d 	bgt	284c <__aeabi_dmul+0x268>
    26d4:	e3740036 	cmn	r4, #54	; 0x36
    26d8:	d3a00000 	movle	r0, #0
    26dc:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    26e0:	d8bd4070 	pople	{r4, r5, r6, lr}
    26e4:	d12fff1e 	bxle	lr
    26e8:	e2644000 	rsb	r4, r4, #0
    26ec:	e2544020 	subs	r4, r4, #32
    26f0:	aa00001a 	bge	2760 <__aeabi_dmul+0x17c>
    26f4:	e294400c 	adds	r4, r4, #12
    26f8:	ca00000c 	bgt	2730 <__aeabi_dmul+0x14c>
    26fc:	e2844014 	add	r4, r4, #20
    2700:	e2645020 	rsb	r5, r4, #32
    2704:	e1a03510 	lsl	r3, r0, r5
    2708:	e1a00430 	lsr	r0, r0, r4
    270c:	e1800511 	orr	r0, r0, r1, lsl r5
    2710:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    2714:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    2718:	e0900fa3 	adds	r0, r0, r3, lsr #31
    271c:	e0a21431 	adc	r1, r2, r1, lsr r4
    2720:	e19ee083 	orrs	lr, lr, r3, lsl #1
    2724:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2728:	e8bd4070 	pop	{r4, r5, r6, lr}
    272c:	e12fff1e 	bx	lr
    2730:	e264400c 	rsb	r4, r4, #12
    2734:	e2645020 	rsb	r5, r4, #32
    2738:	e1a03410 	lsl	r3, r0, r4
    273c:	e1a00530 	lsr	r0, r0, r5
    2740:	e1800411 	orr	r0, r0, r1, lsl r4
    2744:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2748:	e0900fa3 	adds	r0, r0, r3, lsr #31
    274c:	e2a11000 	adc	r1, r1, #0
    2750:	e19ee083 	orrs	lr, lr, r3, lsl #1
    2754:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2758:	e8bd4070 	pop	{r4, r5, r6, lr}
    275c:	e12fff1e 	bx	lr
    2760:	e2645020 	rsb	r5, r4, #32
    2764:	e18ee510 	orr	lr, lr, r0, lsl r5
    2768:	e1a03430 	lsr	r3, r0, r4
    276c:	e1833511 	orr	r3, r3, r1, lsl r5
    2770:	e1a00431 	lsr	r0, r1, r4
    2774:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2778:	e1c00431 	bic	r0, r0, r1, lsr r4
    277c:	e0800fa3 	add	r0, r0, r3, lsr #31
    2780:	e19ee083 	orrs	lr, lr, r3, lsl #1
    2784:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2788:	e8bd4070 	pop	{r4, r5, r6, lr}
    278c:	e12fff1e 	bx	lr
    2790:	e3340000 	teq	r4, #0
    2794:	1a000008 	bne	27bc <__aeabi_dmul+0x1d8>
    2798:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    279c:	e1b00080 	lsls	r0, r0, #1
    27a0:	e0a11001 	adc	r1, r1, r1
    27a4:	e3110601 	tst	r1, #1048576	; 0x100000
    27a8:	02444001 	subeq	r4, r4, #1
    27ac:	0afffffa 	beq	279c <__aeabi_dmul+0x1b8>
    27b0:	e1811006 	orr	r1, r1, r6
    27b4:	e3350000 	teq	r5, #0
    27b8:	112fff1e 	bxne	lr
    27bc:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    27c0:	e1b02082 	lsls	r2, r2, #1
    27c4:	e0a33003 	adc	r3, r3, r3
    27c8:	e3130601 	tst	r3, #1048576	; 0x100000
    27cc:	02455001 	subeq	r5, r5, #1
    27d0:	0afffffa 	beq	27c0 <__aeabi_dmul+0x1dc>
    27d4:	e1833006 	orr	r3, r3, r6
    27d8:	e12fff1e 	bx	lr
    27dc:	e134000c 	teq	r4, r12
    27e0:	e00c5a23 	and	r5, r12, r3, lsr #20
    27e4:	1135000c 	teqne	r5, r12
    27e8:	0a000007 	beq	280c <__aeabi_dmul+0x228>
    27ec:	e1906081 	orrs	r6, r0, r1, lsl #1
    27f0:	11926083 	orrsne	r6, r2, r3, lsl #1
    27f4:	1affffe5 	bne	2790 <__aeabi_dmul+0x1ac>
    27f8:	e0211003 	eor	r1, r1, r3
    27fc:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2800:	e3a00000 	mov	r0, #0
    2804:	e8bd4070 	pop	{r4, r5, r6, lr}
    2808:	e12fff1e 	bx	lr
    280c:	e1906081 	orrs	r6, r0, r1, lsl #1
    2810:	01a00002 	moveq	r0, r2
    2814:	01a01003 	moveq	r1, r3
    2818:	11926083 	orrsne	r6, r2, r3, lsl #1
    281c:	0a000010 	beq	2864 <__aeabi_dmul+0x280>
    2820:	e134000c 	teq	r4, r12
    2824:	1a000001 	bne	2830 <__aeabi_dmul+0x24c>
    2828:	e1906601 	orrs	r6, r0, r1, lsl #12
    282c:	1a00000c 	bne	2864 <__aeabi_dmul+0x280>
    2830:	e135000c 	teq	r5, r12
    2834:	1a000003 	bne	2848 <__aeabi_dmul+0x264>
    2838:	e1926603 	orrs	r6, r2, r3, lsl #12
    283c:	11a00002 	movne	r0, r2
    2840:	11a01003 	movne	r1, r3
    2844:	1a000006 	bne	2864 <__aeabi_dmul+0x280>
    2848:	e0211003 	eor	r1, r1, r3
    284c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2850:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    2854:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    2858:	e3a00000 	mov	r0, #0
    285c:	e8bd4070 	pop	{r4, r5, r6, lr}
    2860:	e12fff1e 	bx	lr
    2864:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    2868:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    286c:	e8bd4070 	pop	{r4, r5, r6, lr}
    2870:	e12fff1e 	bx	lr

00002874 <__aeabi_ddiv>:
    2874:	e92d4070 	push	{r4, r5, r6, lr}
    2878:	e3a0c0ff 	mov	r12, #255	; 0xff
    287c:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    2880:	e01c4a21 	ands	r4, r12, r1, lsr #20
    2884:	101c5a23 	andsne	r5, r12, r3, lsr #20
    2888:	1134000c 	teqne	r4, r12
    288c:	1135000c 	teqne	r5, r12
    2890:	0b00005e 	bleq	2a10 <__aeabi_ddiv+0x19c>
    2894:	e0444005 	sub	r4, r4, r5
    2898:	e021e003 	eor	lr, r1, r3
    289c:	e1925603 	orrs	r5, r2, r3, lsl #12
    28a0:	e1a01601 	lsl	r1, r1, #12
    28a4:	0a00004c 	beq	29dc <__aeabi_ddiv+0x168>
    28a8:	e1a03603 	lsl	r3, r3, #12
    28ac:	e3a05201 	mov	r5, #268435456	; 0x10000000
    28b0:	e1853223 	orr	r3, r5, r3, lsr #4
    28b4:	e1833c22 	orr	r3, r3, r2, lsr #24
    28b8:	e1a02402 	lsl	r2, r2, #8
    28bc:	e1855221 	orr	r5, r5, r1, lsr #4
    28c0:	e1855c20 	orr	r5, r5, r0, lsr #24
    28c4:	e1a06400 	lsl	r6, r0, #8
    28c8:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    28cc:	e1550003 	cmp	r5, r3
    28d0:	01560002 	cmpeq	r6, r2
    28d4:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    28d8:	e2844c03 	add	r4, r4, #768	; 0x300
    28dc:	2a000001 	bcs	28e8 <__aeabi_ddiv+0x74>
    28e0:	e1b030a3 	lsrs	r3, r3, #1
    28e4:	e1a02062 	rrx	r2, r2
    28e8:	e0566002 	subs	r6, r6, r2
    28ec:	e0c55003 	sbc	r5, r5, r3
    28f0:	e1b030a3 	lsrs	r3, r3, #1
    28f4:	e1a02062 	rrx	r2, r2
    28f8:	e3a00601 	mov	r0, #1048576	; 0x100000
    28fc:	e3a0c702 	mov	r12, #524288	; 0x80000
    2900:	e056e002 	subs	lr, r6, r2
    2904:	e0d5e003 	sbcs	lr, r5, r3
    2908:	20466002 	subcs	r6, r6, r2
    290c:	21a0500e 	movcs	r5, lr
    2910:	2180000c 	orrcs	r0, r0, r12
    2914:	e1b030a3 	lsrs	r3, r3, #1
    2918:	e1a02062 	rrx	r2, r2
    291c:	e056e002 	subs	lr, r6, r2
    2920:	e0d5e003 	sbcs	lr, r5, r3
    2924:	20466002 	subcs	r6, r6, r2
    2928:	21a0500e 	movcs	r5, lr
    292c:	218000ac 	orrcs	r0, r0, r12, lsr #1
    2930:	e1b030a3 	lsrs	r3, r3, #1
    2934:	e1a02062 	rrx	r2, r2
    2938:	e056e002 	subs	lr, r6, r2
    293c:	e0d5e003 	sbcs	lr, r5, r3
    2940:	20466002 	subcs	r6, r6, r2
    2944:	21a0500e 	movcs	r5, lr
    2948:	2180012c 	orrcs	r0, r0, r12, lsr #2
    294c:	e1b030a3 	lsrs	r3, r3, #1
    2950:	e1a02062 	rrx	r2, r2
    2954:	e056e002 	subs	lr, r6, r2
    2958:	e0d5e003 	sbcs	lr, r5, r3
    295c:	20466002 	subcs	r6, r6, r2
    2960:	21a0500e 	movcs	r5, lr
    2964:	218001ac 	orrcs	r0, r0, r12, lsr #3
    2968:	e195e006 	orrs	lr, r5, r6
    296c:	0a00000d 	beq	29a8 <__aeabi_ddiv+0x134>
    2970:	e1a05205 	lsl	r5, r5, #4
    2974:	e1855e26 	orr	r5, r5, r6, lsr #28
    2978:	e1a06206 	lsl	r6, r6, #4
    297c:	e1a03183 	lsl	r3, r3, #3
    2980:	e1833ea2 	orr	r3, r3, r2, lsr #29
    2984:	e1a02182 	lsl	r2, r2, #3
    2988:	e1b0c22c 	lsrs	r12, r12, #4
    298c:	1affffdb 	bne	2900 <__aeabi_ddiv+0x8c>
    2990:	e3110601 	tst	r1, #1048576	; 0x100000
    2994:	1a000006 	bne	29b4 <__aeabi_ddiv+0x140>
    2998:	e1811000 	orr	r1, r1, r0
    299c:	e3a00000 	mov	r0, #0
    29a0:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    29a4:	eaffffd5 	b	2900 <__aeabi_ddiv+0x8c>
    29a8:	e3110601 	tst	r1, #1048576	; 0x100000
    29ac:	01811000 	orreq	r1, r1, r0
    29b0:	03a00000 	moveq	r0, #0
    29b4:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    29b8:	835c0c07 	cmphi	r12, #1792	; 0x700
    29bc:	8affff43 	bhi	26d0 <__aeabi_dmul+0xec>
    29c0:	e055c003 	subs	r12, r5, r3
    29c4:	0056c002 	subseq	r12, r6, r2
    29c8:	01b0c0a0 	lsrseq	r12, r0, #1
    29cc:	e2b00000 	adcs	r0, r0, #0
    29d0:	e0a11a04 	adc	r1, r1, r4, lsl #20
    29d4:	e8bd4070 	pop	{r4, r5, r6, lr}
    29d8:	e12fff1e 	bx	lr
    29dc:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    29e0:	e18e1621 	orr	r1, lr, r1, lsr #12
    29e4:	e09440ac 	adds	r4, r4, r12, lsr #1
    29e8:	c074500c 	rsbsgt	r5, r4, r12
    29ec:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    29f0:	c8bd4070 	popgt	{r4, r5, r6, lr}
    29f4:	c12fff1e 	bxgt	lr
    29f8:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    29fc:	e3a0e000 	mov	lr, #0
    2a00:	e2544001 	subs	r4, r4, #1
    2a04:	eaffff31 	b	26d0 <__aeabi_dmul+0xec>
    2a08:	e185e006 	orr	lr, r5, r6
    2a0c:	eaffff2f 	b	26d0 <__aeabi_dmul+0xec>
    2a10:	e00c5a23 	and	r5, r12, r3, lsr #20
    2a14:	e134000c 	teq	r4, r12
    2a18:	0135000c 	teqeq	r5, r12
    2a1c:	0affff90 	beq	2864 <__aeabi_dmul+0x280>
    2a20:	e134000c 	teq	r4, r12
    2a24:	1a000006 	bne	2a44 <__aeabi_ddiv+0x1d0>
    2a28:	e1904601 	orrs	r4, r0, r1, lsl #12
    2a2c:	1affff8c 	bne	2864 <__aeabi_dmul+0x280>
    2a30:	e135000c 	teq	r5, r12
    2a34:	1affff83 	bne	2848 <__aeabi_dmul+0x264>
    2a38:	e1a00002 	mov	r0, r2
    2a3c:	e1a01003 	mov	r1, r3
    2a40:	eaffff87 	b	2864 <__aeabi_dmul+0x280>
    2a44:	e135000c 	teq	r5, r12
    2a48:	1a000004 	bne	2a60 <__aeabi_ddiv+0x1ec>
    2a4c:	e1925603 	orrs	r5, r2, r3, lsl #12
    2a50:	0affff68 	beq	27f8 <__aeabi_dmul+0x214>
    2a54:	e1a00002 	mov	r0, r2
    2a58:	e1a01003 	mov	r1, r3
    2a5c:	eaffff80 	b	2864 <__aeabi_dmul+0x280>
    2a60:	e1906081 	orrs	r6, r0, r1, lsl #1
    2a64:	11926083 	orrsne	r6, r2, r3, lsl #1
    2a68:	1affff48 	bne	2790 <__aeabi_dmul+0x1ac>
    2a6c:	e1904081 	orrs	r4, r0, r1, lsl #1
    2a70:	1affff74 	bne	2848 <__aeabi_dmul+0x264>
    2a74:	e1925083 	orrs	r5, r2, r3, lsl #1
    2a78:	1affff5e 	bne	27f8 <__aeabi_dmul+0x214>
    2a7c:	eaffff78 	b	2864 <__aeabi_dmul+0x280>

00002a80 <__aeabi_d2f>:
    2a80:	e1a02081 	lsl	r2, r1, #1
    2a84:	e2523207 	subs	r3, r2, #1879048192	; 0x70000000
    2a88:	2253c602 	subscs	r12, r3, #2097152	; 0x200000
    2a8c:	227cc57f 	rsbscs	r12, r12, #532676608	; 0x1fc00000
    2a90:	9a000006 	bls	2ab0 <__aeabi_d2f+0x30>
    2a94:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    2a98:	e1a02180 	lsl	r2, r0, #3
    2a9c:	e18c0ea0 	orr	r0, r12, r0, lsr #29
    2aa0:	e3520102 	cmp	r2, #-2147483648	; 0x80000000
    2aa4:	e0a00103 	adc	r0, r0, r3, lsl #2
    2aa8:	03c00001 	biceq	r0, r0, #1
    2aac:	e12fff1e 	bx	lr
    2ab0:	e3110101 	tst	r1, #1073741824	; 0x40000000
    2ab4:	1a00000f 	bne	2af8 <__aeabi_d2f+0x78>
    2ab8:	e293262e 	adds	r2, r3, #48234496	; 0x2e00000
    2abc:	b2010102 	andlt	r0, r1, #-2147483648	; 0x80000000
    2ac0:	b12fff1e 	bxlt	lr
    2ac4:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    2ac8:	e1a02aa2 	lsr	r2, r2, #21
    2acc:	e2622018 	rsb	r2, r2, #24
    2ad0:	e262c020 	rsb	r12, r2, #32
    2ad4:	e1b03c10 	lsls	r3, r0, r12
    2ad8:	e1a00230 	lsr	r0, r0, r2
    2adc:	13800001 	orrne	r0, r0, #1
    2ae0:	e1a03581 	lsl	r3, r1, #11
    2ae4:	e1a035a3 	lsr	r3, r3, #11
    2ae8:	e1800c13 	orr	r0, r0, r3, lsl r12
    2aec:	e1a03233 	lsr	r3, r3, r2
    2af0:	e1a03083 	lsl	r3, r3, #1
    2af4:	eaffffe6 	b	2a94 <__aeabi_d2f+0x14>
    2af8:	e1f03ac2 	mvns	r3, r2, asr #21
    2afc:	1a000003 	bne	2b10 <__aeabi_d2f+0x90>
    2b00:	e1903601 	orrs	r3, r0, r1, lsl #12
    2b04:	13a0047f 	movne	r0, #2130706432	; 0x7f000000
    2b08:	13800503 	orrne	r0, r0, #12582912	; 0xc00000
    2b0c:	112fff1e 	bxne	lr
    2b10:	e2010102 	and	r0, r1, #-2147483648	; 0x80000000
    2b14:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    2b18:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2b1c:	e12fff1e 	bx	lr

00002b20 <__aeabi_frsub>:
    2b20:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    2b24:	ea000000 	b	2b2c <__addsf3>

00002b28 <__aeabi_fsub>:
    2b28:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

00002b2c <__addsf3>:
    2b2c:	e1b02080 	lsls	r2, r0, #1
    2b30:	11b03081 	lslsne	r3, r1, #1
    2b34:	11320003 	teqne	r2, r3
    2b38:	11f0cc42 	mvnsne	r12, r2, asr #24
    2b3c:	11f0cc43 	mvnsne	r12, r3, asr #24
    2b40:	0a000047 	beq	2c64 <__addsf3+0x138>
    2b44:	e1a02c22 	lsr	r2, r2, #24
    2b48:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    2b4c:	c0822003 	addgt	r2, r2, r3
    2b50:	c0201001 	eorgt	r1, r0, r1
    2b54:	c0210000 	eorgt	r0, r1, r0
    2b58:	c0201001 	eorgt	r1, r0, r1
    2b5c:	b2633000 	rsblt	r3, r3, #0
    2b60:	e3530019 	cmp	r3, #25
    2b64:	812fff1e 	bxhi	lr
    2b68:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    2b6c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2b70:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    2b74:	12600000 	rsbne	r0, r0, #0
    2b78:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    2b7c:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    2b80:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    2b84:	12611000 	rsbne	r1, r1, #0
    2b88:	e1320003 	teq	r2, r3
    2b8c:	0a00002e 	beq	2c4c <__addsf3+0x120>
    2b90:	e2422001 	sub	r2, r2, #1
    2b94:	e0900351 	adds	r0, r0, r1, asr r3
    2b98:	e2633020 	rsb	r3, r3, #32
    2b9c:	e1a01311 	lsl	r1, r1, r3
    2ba0:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    2ba4:	5a000001 	bpl	2bb0 <__addsf3+0x84>
    2ba8:	e2711000 	rsbs	r1, r1, #0
    2bac:	e2e00000 	rsc	r0, r0, #0
    2bb0:	e3500502 	cmp	r0, #8388608	; 0x800000
    2bb4:	3a00000b 	bcc	2be8 <__addsf3+0xbc>
    2bb8:	e3500401 	cmp	r0, #16777216	; 0x1000000
    2bbc:	3a000004 	bcc	2bd4 <__addsf3+0xa8>
    2bc0:	e1b000a0 	lsrs	r0, r0, #1
    2bc4:	e1a01061 	rrx	r1, r1
    2bc8:	e2822001 	add	r2, r2, #1
    2bcc:	e35200fe 	cmp	r2, #254	; 0xfe
    2bd0:	2a000038 	bcs	2cb8 <__addsf3+0x18c>
    2bd4:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    2bd8:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2bdc:	03c00001 	biceq	r0, r0, #1
    2be0:	e1800003 	orr	r0, r0, r3
    2be4:	e12fff1e 	bx	lr
    2be8:	e1b01081 	lsls	r1, r1, #1
    2bec:	e0a00000 	adc	r0, r0, r0
    2bf0:	e3100502 	tst	r0, #8388608	; 0x800000
    2bf4:	e2422001 	sub	r2, r2, #1
    2bf8:	1afffff5 	bne	2bd4 <__addsf3+0xa8>
    2bfc:	e1b0c620 	lsrs	r12, r0, #12
    2c00:	01a00600 	lsleq	r0, r0, #12
    2c04:	0242200c 	subeq	r2, r2, #12
    2c08:	e31008ff 	tst	r0, #16711680	; 0xff0000
    2c0c:	01a00400 	lsleq	r0, r0, #8
    2c10:	02422008 	subeq	r2, r2, #8
    2c14:	e310060f 	tst	r0, #15728640	; 0xf00000
    2c18:	01a00200 	lsleq	r0, r0, #4
    2c1c:	02422004 	subeq	r2, r2, #4
    2c20:	e3100503 	tst	r0, #12582912	; 0xc00000
    2c24:	01a00100 	lsleq	r0, r0, #2
    2c28:	02422002 	subeq	r2, r2, #2
    2c2c:	e3500502 	cmp	r0, #8388608	; 0x800000
    2c30:	31a00080 	lslcc	r0, r0, #1
    2c34:	e2d22000 	sbcs	r2, r2, #0
    2c38:	a0800b82 	addge	r0, r0, r2, lsl #23
    2c3c:	b2622000 	rsblt	r2, r2, #0
    2c40:	a1800003 	orrge	r0, r0, r3
    2c44:	b1830230 	orrlt	r0, r3, r0, lsr r2
    2c48:	e12fff1e 	bx	lr
    2c4c:	e3320000 	teq	r2, #0
    2c50:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    2c54:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    2c58:	02822001 	addeq	r2, r2, #1
    2c5c:	12433001 	subne	r3, r3, #1
    2c60:	eaffffca 	b	2b90 <__addsf3+0x64>
    2c64:	e1a03081 	lsl	r3, r1, #1
    2c68:	e1f0cc42 	mvns	r12, r2, asr #24
    2c6c:	11f0cc43 	mvnsne	r12, r3, asr #24
    2c70:	0a000013 	beq	2cc4 <__addsf3+0x198>
    2c74:	e1320003 	teq	r2, r3
    2c78:	0a000002 	beq	2c88 <__addsf3+0x15c>
    2c7c:	e3320000 	teq	r2, #0
    2c80:	01a00001 	moveq	r0, r1
    2c84:	e12fff1e 	bx	lr
    2c88:	e1300001 	teq	r0, r1
    2c8c:	13a00000 	movne	r0, #0
    2c90:	112fff1e 	bxne	lr
    2c94:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    2c98:	1a000002 	bne	2ca8 <__addsf3+0x17c>
    2c9c:	e1b00080 	lsls	r0, r0, #1
    2ca0:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    2ca4:	e12fff1e 	bx	lr
    2ca8:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    2cac:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    2cb0:	312fff1e 	bxcc	lr
    2cb4:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    2cb8:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    2cbc:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2cc0:	e12fff1e 	bx	lr
    2cc4:	e1f02c42 	mvns	r2, r2, asr #24
    2cc8:	11a00001 	movne	r0, r1
    2ccc:	01f03c43 	mvnseq	r3, r3, asr #24
    2cd0:	11a01000 	movne	r1, r0
    2cd4:	e1b02480 	lsls	r2, r0, #9
    2cd8:	01b03481 	lslseq	r3, r1, #9
    2cdc:	01300001 	teqeq	r0, r1
    2ce0:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    2ce4:	e12fff1e 	bx	lr

00002ce8 <__aeabi_ui2f>:
    2ce8:	e3a03000 	mov	r3, #0
    2cec:	ea000001 	b	2cf8 <__aeabi_i2f+0x8>

00002cf0 <__aeabi_i2f>:
    2cf0:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    2cf4:	42600000 	rsbmi	r0, r0, #0
    2cf8:	e1b0c000 	movs	r12, r0
    2cfc:	012fff1e 	bxeq	lr
    2d00:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    2d04:	e1a01000 	mov	r1, r0
    2d08:	e3a00000 	mov	r0, #0
    2d0c:	ea00000f 	b	2d50 <__aeabi_l2f+0x30>

00002d10 <__aeabi_ul2f>:
    2d10:	e1902001 	orrs	r2, r0, r1
    2d14:	012fff1e 	bxeq	lr
    2d18:	e3a03000 	mov	r3, #0
    2d1c:	ea000005 	b	2d38 <__aeabi_l2f+0x18>

00002d20 <__aeabi_l2f>:
    2d20:	e1902001 	orrs	r2, r0, r1
    2d24:	012fff1e 	bxeq	lr
    2d28:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    2d2c:	5a000001 	bpl	2d38 <__aeabi_l2f+0x18>
    2d30:	e2700000 	rsbs	r0, r0, #0
    2d34:	e2e11000 	rsc	r1, r1, #0
    2d38:	e1b0c001 	movs	r12, r1
    2d3c:	01a0c000 	moveq	r12, r0
    2d40:	01a01000 	moveq	r1, r0
    2d44:	03a00000 	moveq	r0, #0
    2d48:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    2d4c:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    2d50:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    2d54:	e3a02017 	mov	r2, #23
    2d58:	e35c0801 	cmp	r12, #65536	; 0x10000
    2d5c:	21a0c82c 	lsrcs	r12, r12, #16
    2d60:	22422010 	subcs	r2, r2, #16
    2d64:	e35c0c01 	cmp	r12, #256	; 0x100
    2d68:	21a0c42c 	lsrcs	r12, r12, #8
    2d6c:	22422008 	subcs	r2, r2, #8
    2d70:	e35c0010 	cmp	r12, #16
    2d74:	21a0c22c 	lsrcs	r12, r12, #4
    2d78:	22422004 	subcs	r2, r2, #4
    2d7c:	e35c0004 	cmp	r12, #4
    2d80:	22422002 	subcs	r2, r2, #2
    2d84:	304220ac 	subcc	r2, r2, r12, lsr #1
    2d88:	e05221ac 	subs	r2, r2, r12, lsr #3
    2d8c:	e0433b82 	sub	r3, r3, r2, lsl #23
    2d90:	ba000006 	blt	2db0 <__aeabi_l2f+0x90>
    2d94:	e0833211 	add	r3, r3, r1, lsl r2
    2d98:	e1a0c210 	lsl	r12, r0, r2
    2d9c:	e2622020 	rsb	r2, r2, #32
    2da0:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    2da4:	e0a30230 	adc	r0, r3, r0, lsr r2
    2da8:	03c00001 	biceq	r0, r0, #1
    2dac:	e12fff1e 	bx	lr
    2db0:	e2822020 	add	r2, r2, #32
    2db4:	e1a0c211 	lsl	r12, r1, r2
    2db8:	e2622020 	rsb	r2, r2, #32
    2dbc:	e190008c 	orrs	r0, r0, r12, lsl #1
    2dc0:	e0a30231 	adc	r0, r3, r1, lsr r2
    2dc4:	01c00fac 	biceq	r0, r0, r12, lsr #31
    2dc8:	e12fff1e 	bx	lr

00002dcc <__aeabi_fmul>:
    2dcc:	e3a0c0ff 	mov	r12, #255	; 0xff
    2dd0:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    2dd4:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    2dd8:	1132000c 	teqne	r2, r12
    2ddc:	1133000c 	teqne	r3, r12
    2de0:	0a00003e 	beq	2ee0 <__aeabi_fmul+0x114>
    2de4:	e0822003 	add	r2, r2, r3
    2de8:	e020c001 	eor	r12, r0, r1
    2dec:	e1b00480 	lsls	r0, r0, #9
    2df0:	11b01481 	lslsne	r1, r1, #9
    2df4:	0a000010 	beq	2e3c <__aeabi_fmul+0x70>
    2df8:	e3a03302 	mov	r3, #134217728	; 0x8000000
    2dfc:	e18302a0 	orr	r0, r3, r0, lsr #5
    2e00:	e18312a1 	orr	r1, r3, r1, lsr #5
    2e04:	e0813190 	umull	r3, r1, r0, r1
    2e08:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    2e0c:	e3510502 	cmp	r1, #8388608	; 0x800000
    2e10:	31a01081 	lslcc	r1, r1, #1
    2e14:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    2e18:	31a03083 	lslcc	r3, r3, #1
    2e1c:	e1800001 	orr	r0, r0, r1
    2e20:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    2e24:	e35200fd 	cmp	r2, #253	; 0xfd
    2e28:	8a00000f 	bhi	2e6c <__aeabi_fmul+0xa0>
    2e2c:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    2e30:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2e34:	03c00001 	biceq	r0, r0, #1
    2e38:	e12fff1e 	bx	lr
    2e3c:	e3300000 	teq	r0, #0
    2e40:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    2e44:	01a01481 	lsleq	r1, r1, #9
    2e48:	e18c04a0 	orr	r0, r12, r0, lsr #9
    2e4c:	e18004a1 	orr	r0, r0, r1, lsr #9
    2e50:	e252207f 	subs	r2, r2, #127	; 0x7f
    2e54:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    2e58:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    2e5c:	c12fff1e 	bxgt	lr
    2e60:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2e64:	e3a03000 	mov	r3, #0
    2e68:	e2522001 	subs	r2, r2, #1
    2e6c:	ca000035 	bgt	2f48 <__aeabi_fmul+0x17c>
    2e70:	e3720019 	cmn	r2, #25
    2e74:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    2e78:	d12fff1e 	bxle	lr
    2e7c:	e2622000 	rsb	r2, r2, #0
    2e80:	e1b01080 	lsls	r1, r0, #1
    2e84:	e1a01231 	lsr	r1, r1, r2
    2e88:	e2622020 	rsb	r2, r2, #32
    2e8c:	e1a0c210 	lsl	r12, r0, r2
    2e90:	e1b00061 	rrxs	r0, r1
    2e94:	e2a00000 	adc	r0, r0, #0
    2e98:	e193308c 	orrs	r3, r3, r12, lsl #1
    2e9c:	01c00fac 	biceq	r0, r0, r12, lsr #31
    2ea0:	e12fff1e 	bx	lr
    2ea4:	e3320000 	teq	r2, #0
    2ea8:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    2eac:	01a00080 	lsleq	r0, r0, #1
    2eb0:	03100502 	tsteq	r0, #8388608	; 0x800000
    2eb4:	02422001 	subeq	r2, r2, #1
    2eb8:	0afffffb 	beq	2eac <__aeabi_fmul+0xe0>
    2ebc:	e180000c 	orr	r0, r0, r12
    2ec0:	e3330000 	teq	r3, #0
    2ec4:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    2ec8:	01a01081 	lsleq	r1, r1, #1
    2ecc:	03110502 	tsteq	r1, #8388608	; 0x800000
    2ed0:	02433001 	subeq	r3, r3, #1
    2ed4:	0afffffb 	beq	2ec8 <__aeabi_fmul+0xfc>
    2ed8:	e181100c 	orr	r1, r1, r12
    2edc:	eaffffc0 	b	2de4 <__aeabi_fmul+0x18>
    2ee0:	e00c3ba1 	and	r3, r12, r1, lsr #23
    2ee4:	e132000c 	teq	r2, r12
    2ee8:	1133000c 	teqne	r3, r12
    2eec:	0a000005 	beq	2f08 <__aeabi_fmul+0x13c>
    2ef0:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    2ef4:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    2ef8:	1affffe9 	bne	2ea4 <__aeabi_fmul+0xd8>
    2efc:	e0200001 	eor	r0, r0, r1
    2f00:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    2f04:	e12fff1e 	bx	lr
    2f08:	e3300000 	teq	r0, #0
    2f0c:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    2f10:	01a00001 	moveq	r0, r1
    2f14:	13310000 	teqne	r1, #0
    2f18:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    2f1c:	0a00000d 	beq	2f58 <__aeabi_fmul+0x18c>
    2f20:	e132000c 	teq	r2, r12
    2f24:	1a000001 	bne	2f30 <__aeabi_fmul+0x164>
    2f28:	e1b02480 	lsls	r2, r0, #9
    2f2c:	1a000009 	bne	2f58 <__aeabi_fmul+0x18c>
    2f30:	e133000c 	teq	r3, r12
    2f34:	1a000002 	bne	2f44 <__aeabi_fmul+0x178>
    2f38:	e1b03481 	lsls	r3, r1, #9
    2f3c:	11a00001 	movne	r0, r1
    2f40:	1a000004 	bne	2f58 <__aeabi_fmul+0x18c>
    2f44:	e0200001 	eor	r0, r0, r1
    2f48:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    2f4c:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    2f50:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2f54:	e12fff1e 	bx	lr
    2f58:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    2f5c:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    2f60:	e12fff1e 	bx	lr

00002f64 <__aeabi_fdiv>:
    2f64:	e3a0c0ff 	mov	r12, #255	; 0xff
    2f68:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    2f6c:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    2f70:	1132000c 	teqne	r2, r12
    2f74:	1133000c 	teqne	r3, r12
    2f78:	0a00003a 	beq	3068 <__aeabi_fdiv+0x104>
    2f7c:	e0422003 	sub	r2, r2, r3
    2f80:	e020c001 	eor	r12, r0, r1
    2f84:	e1b01481 	lsls	r1, r1, #9
    2f88:	e1a00480 	lsl	r0, r0, #9
    2f8c:	0a00001c 	beq	3004 <__aeabi_fdiv+0xa0>
    2f90:	e3a03201 	mov	r3, #268435456	; 0x10000000
    2f94:	e1831221 	orr	r1, r3, r1, lsr #4
    2f98:	e1833220 	orr	r3, r3, r0, lsr #4
    2f9c:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    2fa0:	e1530001 	cmp	r3, r1
    2fa4:	31a03083 	lslcc	r3, r3, #1
    2fa8:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    2fac:	e3a0c502 	mov	r12, #8388608	; 0x800000
    2fb0:	e1530001 	cmp	r3, r1
    2fb4:	20433001 	subcs	r3, r3, r1
    2fb8:	2180000c 	orrcs	r0, r0, r12
    2fbc:	e15300a1 	cmp	r3, r1, lsr #1
    2fc0:	204330a1 	subcs	r3, r3, r1, lsr #1
    2fc4:	218000ac 	orrcs	r0, r0, r12, lsr #1
    2fc8:	e1530121 	cmp	r3, r1, lsr #2
    2fcc:	20433121 	subcs	r3, r3, r1, lsr #2
    2fd0:	2180012c 	orrcs	r0, r0, r12, lsr #2
    2fd4:	e15301a1 	cmp	r3, r1, lsr #3
    2fd8:	204331a1 	subcs	r3, r3, r1, lsr #3
    2fdc:	218001ac 	orrcs	r0, r0, r12, lsr #3
    2fe0:	e1b03203 	lsls	r3, r3, #4
    2fe4:	11b0c22c 	lsrsne	r12, r12, #4
    2fe8:	1afffff0 	bne	2fb0 <__aeabi_fdiv+0x4c>
    2fec:	e35200fd 	cmp	r2, #253	; 0xfd
    2ff0:	8affff9d 	bhi	2e6c <__aeabi_fmul+0xa0>
    2ff4:	e1530001 	cmp	r3, r1
    2ff8:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2ffc:	03c00001 	biceq	r0, r0, #1
    3000:	e12fff1e 	bx	lr
    3004:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    3008:	e18c04a0 	orr	r0, r12, r0, lsr #9
    300c:	e292207f 	adds	r2, r2, #127	; 0x7f
    3010:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    3014:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    3018:	c12fff1e 	bxgt	lr
    301c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    3020:	e3a03000 	mov	r3, #0
    3024:	e2522001 	subs	r2, r2, #1
    3028:	eaffff8f 	b	2e6c <__aeabi_fmul+0xa0>
    302c:	e3320000 	teq	r2, #0
    3030:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    3034:	01a00080 	lsleq	r0, r0, #1
    3038:	03100502 	tsteq	r0, #8388608	; 0x800000
    303c:	02422001 	subeq	r2, r2, #1
    3040:	0afffffb 	beq	3034 <__aeabi_fdiv+0xd0>
    3044:	e180000c 	orr	r0, r0, r12
    3048:	e3330000 	teq	r3, #0
    304c:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    3050:	01a01081 	lsleq	r1, r1, #1
    3054:	03110502 	tsteq	r1, #8388608	; 0x800000
    3058:	02433001 	subeq	r3, r3, #1
    305c:	0afffffb 	beq	3050 <__aeabi_fdiv+0xec>
    3060:	e181100c 	orr	r1, r1, r12
    3064:	eaffffc4 	b	2f7c <__aeabi_fdiv+0x18>
    3068:	e00c3ba1 	and	r3, r12, r1, lsr #23
    306c:	e132000c 	teq	r2, r12
    3070:	1a000005 	bne	308c <__aeabi_fdiv+0x128>
    3074:	e1b02480 	lsls	r2, r0, #9
    3078:	1affffb6 	bne	2f58 <__aeabi_fmul+0x18c>
    307c:	e133000c 	teq	r3, r12
    3080:	1affffaf 	bne	2f44 <__aeabi_fmul+0x178>
    3084:	e1a00001 	mov	r0, r1
    3088:	eaffffb2 	b	2f58 <__aeabi_fmul+0x18c>
    308c:	e133000c 	teq	r3, r12
    3090:	1a000003 	bne	30a4 <__aeabi_fdiv+0x140>
    3094:	e1b03481 	lsls	r3, r1, #9
    3098:	0affff97 	beq	2efc <__aeabi_fmul+0x130>
    309c:	e1a00001 	mov	r0, r1
    30a0:	eaffffac 	b	2f58 <__aeabi_fmul+0x18c>
    30a4:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    30a8:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    30ac:	1affffde 	bne	302c <__aeabi_fdiv+0xc8>
    30b0:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    30b4:	1affffa2 	bne	2f44 <__aeabi_fmul+0x178>
    30b8:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    30bc:	1affff8e 	bne	2efc <__aeabi_fmul+0x130>
    30c0:	eaffffa4 	b	2f58 <__aeabi_fmul+0x18c>

000030c4 <__gesf2>:
    30c4:	e3e0c000 	mvn	r12, #0
    30c8:	ea000002 	b	30d8 <__cmpsf2+0x4>

000030cc <__lesf2>:
    30cc:	e3a0c001 	mov	r12, #1
    30d0:	ea000000 	b	30d8 <__cmpsf2+0x4>

000030d4 <__cmpsf2>:
    30d4:	e3a0c001 	mov	r12, #1
    30d8:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    30dc:	e1a02080 	lsl	r2, r0, #1
    30e0:	e1a03081 	lsl	r3, r1, #1
    30e4:	e1f0cc42 	mvns	r12, r2, asr #24
    30e8:	11f0cc43 	mvnsne	r12, r3, asr #24
    30ec:	0a000007 	beq	3110 <__cmpsf2+0x3c>
    30f0:	e28dd004 	add	sp, sp, #4
    30f4:	e192c0a3 	orrs	r12, r2, r3, lsr #1
    30f8:	11300001 	teqne	r0, r1
    30fc:	50520003 	subspl	r0, r2, r3
    3100:	81a00fc1 	asrhi	r0, r1, #31
    3104:	31e00fc1 	mvncc	r0, r1, asr #31
    3108:	13800001 	orrne	r0, r0, #1
    310c:	e12fff1e 	bx	lr
    3110:	e1f0cc42 	mvns	r12, r2, asr #24
    3114:	1a000001 	bne	3120 <__cmpsf2+0x4c>
    3118:	e1b0c480 	lsls	r12, r0, #9
    311c:	1a000003 	bne	3130 <__cmpsf2+0x5c>
    3120:	e1f0cc43 	mvns	r12, r3, asr #24
    3124:	1afffff1 	bne	30f0 <__cmpsf2+0x1c>
    3128:	e1b0c481 	lsls	r12, r1, #9
    312c:	0affffef 	beq	30f0 <__cmpsf2+0x1c>
    3130:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    3134:	e12fff1e 	bx	lr

00003138 <__aeabi_cfrcmple>:
    3138:	e1a0c000 	mov	r12, r0
    313c:	e1a00001 	mov	r0, r1
    3140:	e1a0100c 	mov	r1, r12
    3144:	eaffffff 	b	3148 <__aeabi_cfcmpeq>

00003148 <__aeabi_cfcmpeq>:
    3148:	e92d400f 	push	{r0, r1, r2, r3, lr}
    314c:	ebffffe0 	bl	30d4 <__cmpsf2>
    3150:	e3500000 	cmp	r0, #0
    3154:	43700000 	cmnmi	r0, #0
    3158:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
    315c:	e12fff1e 	bx	lr

00003160 <__aeabi_fcmpeq>:
    3160:	e52de008 	str	lr, [sp, #-8]!
    3164:	ebfffff7 	bl	3148 <__aeabi_cfcmpeq>
    3168:	03a00001 	moveq	r0, #1
    316c:	13a00000 	movne	r0, #0
    3170:	e49de008 	ldr	lr, [sp], #8
    3174:	e12fff1e 	bx	lr

00003178 <__aeabi_fcmplt>:
    3178:	e52de008 	str	lr, [sp, #-8]!
    317c:	ebfffff1 	bl	3148 <__aeabi_cfcmpeq>
    3180:	33a00001 	movcc	r0, #1
    3184:	23a00000 	movcs	r0, #0
    3188:	e49de008 	ldr	lr, [sp], #8
    318c:	e12fff1e 	bx	lr

00003190 <__aeabi_fcmple>:
    3190:	e52de008 	str	lr, [sp, #-8]!
    3194:	ebffffeb 	bl	3148 <__aeabi_cfcmpeq>
    3198:	93a00001 	movls	r0, #1
    319c:	83a00000 	movhi	r0, #0
    31a0:	e49de008 	ldr	lr, [sp], #8
    31a4:	e12fff1e 	bx	lr

000031a8 <__aeabi_fcmpge>:
    31a8:	e52de008 	str	lr, [sp, #-8]!
    31ac:	ebffffe1 	bl	3138 <__aeabi_cfrcmple>
    31b0:	93a00001 	movls	r0, #1
    31b4:	83a00000 	movhi	r0, #0
    31b8:	e49de008 	ldr	lr, [sp], #8
    31bc:	e12fff1e 	bx	lr

000031c0 <__aeabi_fcmpgt>:
    31c0:	e52de008 	str	lr, [sp, #-8]!
    31c4:	ebffffdb 	bl	3138 <__aeabi_cfrcmple>
    31c8:	33a00001 	movcc	r0, #1
    31cc:	23a00000 	movcs	r0, #0
    31d0:	e49de008 	ldr	lr, [sp], #8
    31d4:	e12fff1e 	bx	lr

000031d8 <__aeabi_f2iz>:
    31d8:	e1a02080 	lsl	r2, r0, #1
    31dc:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    31e0:	3a000008 	bcc	3208 <__aeabi_f2iz+0x30>
    31e4:	e3a0309e 	mov	r3, #158	; 0x9e
    31e8:	e0532c22 	subs	r2, r3, r2, lsr #24
    31ec:	9a000007 	bls	3210 <__aeabi_f2iz+0x38>
    31f0:	e1a03400 	lsl	r3, r0, #8
    31f4:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    31f8:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    31fc:	e1a00233 	lsr	r0, r3, r2
    3200:	12600000 	rsbne	r0, r0, #0
    3204:	e12fff1e 	bx	lr
    3208:	e3a00000 	mov	r0, #0
    320c:	e12fff1e 	bx	lr
    3210:	e3720061 	cmn	r2, #97	; 0x61
    3214:	1a000001 	bne	3220 <__aeabi_f2iz+0x48>
    3218:	e1b02480 	lsls	r2, r0, #9
    321c:	1a000002 	bne	322c <__aeabi_f2iz+0x54>
    3220:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    3224:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    3228:	e12fff1e 	bx	lr
    322c:	e3a00000 	mov	r0, #0
    3230:	e12fff1e 	bx	lr

00003234 <atexit>:
    3234:	e1a01000 	mov	r1, r0
    3238:	e3a00000 	mov	r0, #0
    323c:	e92d4008 	push	{r3, lr}
    3240:	e1a02000 	mov	r2, r0
    3244:	e1a03000 	mov	r3, r0
    3248:	eb00000e 	bl	3288 <__register_exitproc>
    324c:	e8bd4008 	pop	{r3, lr}
    3250:	e12fff1e 	bx	lr

00003254 <exit>:
    3254:	e92d4008 	push	{r3, lr}
    3258:	e3a01000 	mov	r1, #0
    325c:	e1a04000 	mov	r4, r0
    3260:	eb000045 	bl	337c <__call_exitprocs>
    3264:	e59f3018 	ldr	r3, [pc, #24]	; 3284 <exit+0x30>
    3268:	e5930000 	ldr	r0, [r3]
    326c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    3270:	e3530000 	cmp	r3, #0
    3274:	11a0e00f 	movne	lr, pc
    3278:	112fff13 	bxne	r3
    327c:	e1a00004 	mov	r0, r4
    3280:	eb0000c9 	bl	35ac <_exit>
    3284:	00003674 	.word	0x00003674

00003288 <__register_exitproc>:
    3288:	e59fc0e4 	ldr	r12, [pc, #228]	; 3374 <__register_exitproc+0xec>
    328c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    3290:	e59c4000 	ldr	r4, [r12]
    3294:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    3298:	e35c0000 	cmp	r12, #0
    329c:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    32a0:	e59c5004 	ldr	r5, [r12, #4]
    32a4:	0584c148 	streq	r12, [r4, #328]	; 0x148
    32a8:	e355001f 	cmp	r5, #31
    32ac:	e24dd010 	sub	sp, sp, #16
    32b0:	e1a06000 	mov	r6, r0
    32b4:	da000015 	ble	3310 <__register_exitproc+0x88>
    32b8:	e59f00b8 	ldr	r0, [pc, #184]	; 3378 <__register_exitproc+0xf0>
    32bc:	e3500000 	cmp	r0, #0
    32c0:	1a000001 	bne	32cc <__register_exitproc+0x44>
    32c4:	e3e00000 	mvn	r0, #0
    32c8:	ea000018 	b	3330 <__register_exitproc+0xa8>
    32cc:	e3a00e19 	mov	r0, #400	; 0x190
    32d0:	e58d100c 	str	r1, [sp, #12]
    32d4:	e58d2008 	str	r2, [sp, #8]
    32d8:	e58d3004 	str	r3, [sp, #4]
    32dc:	e320f000 	nop	{0}
    32e0:	e250c000 	subs	r12, r0, #0
    32e4:	e59d100c 	ldr	r1, [sp, #12]
    32e8:	e59d2008 	ldr	r2, [sp, #8]
    32ec:	e59d3004 	ldr	r3, [sp, #4]
    32f0:	0afffff3 	beq	32c4 <__register_exitproc+0x3c>
    32f4:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    32f8:	e3a00000 	mov	r0, #0
    32fc:	e58c0004 	str	r0, [r12, #4]
    3300:	e58c5000 	str	r5, [r12]
    3304:	e584c148 	str	r12, [r4, #328]	; 0x148
    3308:	e58c0188 	str	r0, [r12, #392]	; 0x188
    330c:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    3310:	e3560000 	cmp	r6, #0
    3314:	e59c4004 	ldr	r4, [r12, #4]
    3318:	1a000007 	bne	333c <__register_exitproc+0xb4>
    331c:	e2843002 	add	r3, r4, #2
    3320:	e2844001 	add	r4, r4, #1
    3324:	e78c1103 	str	r1, [r12, r3, lsl #2]
    3328:	e58c4004 	str	r4, [r12, #4]
    332c:	e3a00000 	mov	r0, #0
    3330:	e28dd010 	add	sp, sp, #16
    3334:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    3338:	e12fff1e 	bx	lr
    333c:	e3a00001 	mov	r0, #1
    3340:	e1a00410 	lsl	r0, r0, r4
    3344:	e08c8104 	add	r8, r12, r4, lsl #2
    3348:	e3560002 	cmp	r6, #2
    334c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    3350:	e5883108 	str	r3, [r8, #264]	; 0x108
    3354:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    3358:	e1877000 	orr	r7, r7, r0
    335c:	01830000 	orreq	r0, r3, r0
    3360:	e1a05008 	mov	r5, r8
    3364:	e5882088 	str	r2, [r8, #136]	; 0x88
    3368:	e58c7188 	str	r7, [r12, #392]	; 0x188
    336c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    3370:	eaffffe9 	b	331c <__register_exitproc+0x94>
    3374:	00003674 	.word	0x00003674
    3378:	00000000 	.word	0x00000000

0000337c <__call_exitprocs>:
    337c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3380:	e59f3168 	ldr	r3, [pc, #360]	; 34f0 <__call_exitprocs+0x174>
    3384:	e5933000 	ldr	r3, [r3]
    3388:	e24dd014 	sub	sp, sp, #20
    338c:	e58d3004 	str	r3, [sp, #4]
    3390:	e2833f52 	add	r3, r3, #328	; 0x148
    3394:	e58d0008 	str	r0, [sp, #8]
    3398:	e58d300c 	str	r3, [sp, #12]
    339c:	e1a07001 	mov	r7, r1
    33a0:	e3a08001 	mov	r8, #1
    33a4:	e59d3004 	ldr	r3, [sp, #4]
    33a8:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    33ac:	e3560000 	cmp	r6, #0
    33b0:	e59db00c 	ldr	r11, [sp, #12]
    33b4:	0a000033 	beq	3488 <__call_exitprocs+0x10c>
    33b8:	e5965004 	ldr	r5, [r6, #4]
    33bc:	e2554001 	subs	r4, r5, #1
    33c0:	5286a088 	addpl	r10, r6, #136	; 0x88
    33c4:	5285501f 	addpl	r5, r5, #31
    33c8:	508a5105 	addpl	r5, r10, r5, lsl #2
    33cc:	5a000007 	bpl	33f0 <__call_exitprocs+0x74>
    33d0:	ea000029 	b	347c <__call_exitprocs+0x100>
    33d4:	e5953000 	ldr	r3, [r5]
    33d8:	e1530007 	cmp	r3, r7
    33dc:	0a000005 	beq	33f8 <__call_exitprocs+0x7c>
    33e0:	e2444001 	sub	r4, r4, #1
    33e4:	e3740001 	cmn	r4, #1
    33e8:	e2455004 	sub	r5, r5, #4
    33ec:	0a000022 	beq	347c <__call_exitprocs+0x100>
    33f0:	e3570000 	cmp	r7, #0
    33f4:	1afffff6 	bne	33d4 <__call_exitprocs+0x58>
    33f8:	e5963004 	ldr	r3, [r6, #4]
    33fc:	e06a2005 	rsb	r2, r10, r5
    3400:	e2433001 	sub	r3, r3, #1
    3404:	e0862002 	add	r2, r6, r2
    3408:	e1530004 	cmp	r3, r4
    340c:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    3410:	13a01000 	movne	r1, #0
    3414:	05864004 	streq	r4, [r6, #4]
    3418:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    341c:	e3530000 	cmp	r3, #0
    3420:	0affffee 	beq	33e0 <__call_exitprocs+0x64>
    3424:	e1a02418 	lsl	r2, r8, r4
    3428:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    342c:	e1120001 	tst	r2, r1
    3430:	e5969004 	ldr	r9, [r6, #4]
    3434:	0a000016 	beq	3494 <__call_exitprocs+0x118>
    3438:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    343c:	e1120001 	tst	r2, r1
    3440:	1a000016 	bne	34a0 <__call_exitprocs+0x124>
    3444:	e59d0008 	ldr	r0, [sp, #8]
    3448:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    344c:	e1a0e00f 	mov	lr, pc
    3450:	e12fff13 	bx	r3
    3454:	e5963004 	ldr	r3, [r6, #4]
    3458:	e1530009 	cmp	r3, r9
    345c:	1affffd0 	bne	33a4 <__call_exitprocs+0x28>
    3460:	e59b3000 	ldr	r3, [r11]
    3464:	e1530006 	cmp	r3, r6
    3468:	1affffcd 	bne	33a4 <__call_exitprocs+0x28>
    346c:	e2444001 	sub	r4, r4, #1
    3470:	e3740001 	cmn	r4, #1
    3474:	e2455004 	sub	r5, r5, #4
    3478:	1affffdc 	bne	33f0 <__call_exitprocs+0x74>
    347c:	e59f1070 	ldr	r1, [pc, #112]	; 34f4 <__call_exitprocs+0x178>
    3480:	e3510000 	cmp	r1, #0
    3484:	1a000009 	bne	34b0 <__call_exitprocs+0x134>
    3488:	e28dd014 	add	sp, sp, #20
    348c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3490:	e12fff1e 	bx	lr
    3494:	e1a0e00f 	mov	lr, pc
    3498:	e12fff13 	bx	r3
    349c:	eaffffec 	b	3454 <__call_exitprocs+0xd8>
    34a0:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    34a4:	e1a0e00f 	mov	lr, pc
    34a8:	e12fff13 	bx	r3
    34ac:	eaffffe8 	b	3454 <__call_exitprocs+0xd8>
    34b0:	e5963004 	ldr	r3, [r6, #4]
    34b4:	e3530000 	cmp	r3, #0
    34b8:	e5963000 	ldr	r3, [r6]
    34bc:	1a000008 	bne	34e4 <__call_exitprocs+0x168>
    34c0:	e3530000 	cmp	r3, #0
    34c4:	0a000006 	beq	34e4 <__call_exitprocs+0x168>
    34c8:	e1a00006 	mov	r0, r6
    34cc:	e58b3000 	str	r3, [r11]
    34d0:	e320f000 	nop	{0}
    34d4:	e59b6000 	ldr	r6, [r11]
    34d8:	e3560000 	cmp	r6, #0
    34dc:	1affffb5 	bne	33b8 <__call_exitprocs+0x3c>
    34e0:	eaffffe8 	b	3488 <__call_exitprocs+0x10c>
    34e4:	e1a0b006 	mov	r11, r6
    34e8:	e1a06003 	mov	r6, r3
    34ec:	eafffff9 	b	34d8 <__call_exitprocs+0x15c>
    34f0:	00003674 	.word	0x00003674
    34f4:	00000000 	.word	0x00000000

000034f8 <register_fini>:
    34f8:	e92d4008 	push	{r3, lr}
    34fc:	e59f3010 	ldr	r3, [pc, #16]	; 3514 <register_fini+0x1c>
    3500:	e3530000 	cmp	r3, #0
    3504:	159f000c 	ldrne	r0, [pc, #12]	; 3518 <register_fini+0x20>
    3508:	1bffff49 	blne	3234 <atexit>
    350c:	e8bd4008 	pop	{r3, lr}
    3510:	e12fff1e 	bx	lr
    3514:	0000369c 	.word	0x0000369c
    3518:	0000351c 	.word	0x0000351c

0000351c <__libc_fini_array>:
    351c:	e92d4038 	push	{r3, r4, r5, lr}
    3520:	e59f5030 	ldr	r5, [pc, #48]	; 3558 <__libc_fini_array+0x3c>
    3524:	e59f4030 	ldr	r4, [pc, #48]	; 355c <__libc_fini_array+0x40>
    3528:	e0654004 	rsb	r4, r5, r4
    352c:	e1b04144 	asrs	r4, r4, #2
    3530:	10855104 	addne	r5, r5, r4, lsl #2
    3534:	0a000004 	beq	354c <__libc_fini_array+0x30>
    3538:	e5353004 	ldr	r3, [r5, #-4]!
    353c:	e1a0e00f 	mov	lr, pc
    3540:	e12fff13 	bx	r3
    3544:	e2544001 	subs	r4, r4, #1
    3548:	1afffffa 	bne	3538 <__libc_fini_array+0x1c>
    354c:	eb000052 	bl	369c <__libc_fini>
    3550:	e8bd4038 	pop	{r3, r4, r5, lr}
    3554:	e12fff1e 	bx	lr
    3558:	000036b4 	.word	0x000036b4
    355c:	000036b8 	.word	0x000036b8

00003560 <__cs3_premain>:
    3560:	e92d4008 	push	{r3, lr}
    3564:	eb000017 	bl	35c8 <__libc_init_array>
    3568:	e59f3030 	ldr	r3, [pc, #48]	; 35a0 <__cs3_premain+0x40>
    356c:	e3530000 	cmp	r3, #0
    3570:	15930000 	ldrne	r0, [r3]
    3574:	01a00003 	moveq	r0, r3
    3578:	e59f3024 	ldr	r3, [pc, #36]	; 35a4 <__cs3_premain+0x44>
    357c:	e3530000 	cmp	r3, #0
    3580:	15931000 	ldrne	r1, [r3]
    3584:	01a01003 	moveq	r1, r3
    3588:	e3a02000 	mov	r2, #0
    358c:	ebfff684 	bl	fa4 <main>
    3590:	e59f3010 	ldr	r3, [pc, #16]	; 35a8 <__cs3_premain+0x48>
    3594:	e3530000 	cmp	r3, #0
    3598:	1bffff2d 	blne	3254 <exit>
    359c:	eafffffe 	b	359c <__cs3_premain+0x3c>
	...
    35a8:	00003254 	.word	0x00003254

000035ac <_exit>:
    35ac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    35b0:	e3a00018 	mov	r0, #24
    35b4:	e59f1004 	ldr	r1, [pc, #4]	; 35c0 <_exit+0x14>
    35b8:	ef123456 	svc	0x00123456
    35bc:	eafffffe 	b	35bc <_exit+0x10>
    35c0:	00020026 	.word	0x00020026

000035c4 <__cs3_isr_interrupt>:
    35c4:	eafffffe 	b	35c4 <__cs3_isr_interrupt>

000035c8 <__libc_init_array>:
    35c8:	e92d4070 	push	{r4, r5, r6, lr}
    35cc:	e59f506c 	ldr	r5, [pc, #108]	; 3640 <__libc_init_array+0x78>
    35d0:	e59f606c 	ldr	r6, [pc, #108]	; 3644 <__libc_init_array+0x7c>
    35d4:	e0656006 	rsb	r6, r5, r6
    35d8:	e1b06146 	asrs	r6, r6, #2
    35dc:	12455004 	subne	r5, r5, #4
    35e0:	13a04000 	movne	r4, #0
    35e4:	0a000005 	beq	3600 <__libc_init_array+0x38>
    35e8:	e5b53004 	ldr	r3, [r5, #4]!
    35ec:	e2844001 	add	r4, r4, #1
    35f0:	e1a0e00f 	mov	lr, pc
    35f4:	e12fff13 	bx	r3
    35f8:	e1560004 	cmp	r6, r4
    35fc:	1afffff9 	bne	35e8 <__libc_init_array+0x20>
    3600:	e59f5040 	ldr	r5, [pc, #64]	; 3648 <__libc_init_array+0x80>
    3604:	e59f6040 	ldr	r6, [pc, #64]	; 364c <__libc_init_array+0x84>
    3608:	e0656006 	rsb	r6, r5, r6
    360c:	eb00001a 	bl	367c <_init>
    3610:	e1b06146 	asrs	r6, r6, #2
    3614:	12455004 	subne	r5, r5, #4
    3618:	13a04000 	movne	r4, #0
    361c:	0a000005 	beq	3638 <__libc_init_array+0x70>
    3620:	e5b53004 	ldr	r3, [r5, #4]!
    3624:	e2844001 	add	r4, r4, #1
    3628:	e1a0e00f 	mov	lr, pc
    362c:	e12fff13 	bx	r3
    3630:	e1560004 	cmp	r6, r4
    3634:	1afffff9 	bne	3620 <__libc_init_array+0x58>
    3638:	e8bd4070 	pop	{r4, r5, r6, lr}
    363c:	e12fff1e 	bx	lr
    3640:	00003694 	.word	0x00003694
    3644:	00003694 	.word	0x00003694
    3648:	00003694 	.word	0x00003694
    364c:	0000369c 	.word	0x0000369c

Disassembly of section .rodata:

00003654 <_global_impure_ptr-0x20>:
    3654:	4302d021 	.word	0x4302d021
    3658:	4312d4fe 	.word	0x4312d4fe
    365c:	4324d062 	.word	0x4324d062
    3660:	432e9d2f 	.word	0x432e9d2f
    3664:	4343ff7d 	.word	0x4343ff7d
    3668:	435c0000 	.word	0x435c0000
    366c:	4376f127 	.word	0x4376f127
    3670:	4382d021 	.word	0x4382d021

00003674 <_global_impure_ptr>:
    3674:	000324e8 00000043                       .$..C...

0000367c <_init>:
    367c:	e1a0c00d 	mov	r12, sp
    3680:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    3684:	e24cb004 	sub	r11, r12, #4
    3688:	e24bd028 	sub	sp, r11, #40	; 0x28
    368c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    3690:	e12fff1e 	bx	lr

00003694 <__init_array_start>:
    3694:	000034f8 	.word	0x000034f8

00003698 <__frame_dummy_init_array_entry>:
    3698:	00000208                                ....

0000369c <__libc_fini>:
    369c:	e1a0c00d 	mov	r12, sp
    36a0:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    36a4:	e24cb004 	sub	r11, r12, #4
    36a8:	e24bd028 	sub	sp, r11, #40	; 0x28
    36ac:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    36b0:	e12fff1e 	bx	lr

000036b4 <__fini_array_start>:
    36b4:	000001c4 	.word	0x000001c4

000036b8 <__cs3_regions>:
	...
    36c4:	00032918 	.word	0x00032918
    36c8:	00000020 	.word	0x00000020

000036cc <__cs3_regions_end>:
    36cc:	00000000 	.word	0x00000000
